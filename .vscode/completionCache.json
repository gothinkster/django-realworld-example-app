{
  "from __future__ import unicode_literals\r\nfrom django import forms\r\nfrom django.utils.translation import ugettext_lazy as _\r\n \r\nfrom symposion.reviews.models import Review, Comment, ProposalMessage, VOTES\r\n \r\nclass ReviewCommentForm(forms.ModelForm):\r\n class Meta:\r\n model = Comment\r\n fields = [\"\"]\r\nclass BulkPresentationForm(forms.Form):\r\n talk_ids = forms.CharField(\r\n label=_(\"\"),\r\n max_length=500,\r\n help_text=_(\"\")\r\n )\r\nclass FeedbackForm(forms.Form):\r\n feedback_id = forms.CharField(\r\n label=_(\"\"),\r\n max_length=500, \r\n help_text=_(\"\")\r\n )\r\nclass SpeakerFeedbackForm(forms.Form):\r\n feedback_id = forms.CharField(\r\n label=_(\"\"),\r\n max_length=500, \r\n help_text=_(\"\")\r\n )\r\nclass ContingentFeedbackForm(forms.Form):\r\n feedback_id = forms.CharField(\r\n label=_(\"\"),\r\n max_length=500, \r\n help_text=_(\"\")\r\n )\r\n \r\nclass ReviewForm(forms.ModelForm):\r\n class Meta:\r\n model = Review\r\n fields = [\"\", \"\"]\r\n \r\n def __init__(self, *args, **kwargs):\r\n super(ReviewForm, self).__init__(*args, **kwargs)\r\n self.fields[\"\"] = forms.ChoiceField(\r\n widget=forms.RadioSelect(),\r\n choices=VOTES.CHOICES\r\n )\r\n \r\nclass SpeakerCommentForm(forms.ModelForm):\r\n class Meta:\r\n model = ProposalMessage\r\n fields = [\"\"]\r\n \r\n# TODO: Add staff review form\r\nclass StaffReviewForm": [
    [
      -0.00040968947483502604,
      [
        "(",
        "forms",
        ".",
        "Form",
        "):"
      ]
    ]
  ],
  "from __future__ import unicode_literals\r\nfrom django import forms\r\nfrom django.utils.translation import ugettext_lazy as _\r\n \r\nfrom symposion.reviews.models import Review, Comment, ProposalMessage, VOTES\r\n \r\nclass ReviewCommentForm(forms.ModelForm):\r\n class Meta:\r\n model = Comment\r\n fields = [\"\"]\r\nclass BulkPresentationForm(forms.Form):\r\n talk_ids = forms.CharField(\r\n label=_(\"\"),\r\n max_length=500,\r\n help_text=_(\"\")\r\n )\r\nclass FeedbackForm(forms.Form):\r\n feedback_id = forms.CharField(\r\n label=_(\"\"),\r\n max_length=500, \r\n help_text=_(\"\")\r\n )\r\nclass SpeakerFeedbackForm(forms.Form):\r\n feedback_id = forms.CharField(\r\n label=_(\"\"),\r\n max_length=500, \r\n help_text=_(\"\")\r\n )\r\nclass ContingentFeedbackForm(forms.Form):\r\n feedback_id = forms.CharField(\r\n label=_(\"\"),\r\n max_length=500, \r\n help_text=_(\"\")\r\n )\r\n \r\nclass ReviewForm(forms.ModelForm):\r\n class Meta:\r\n model = Review\r\n fields = [\"\", \"\"]\r\n \r\n def __init__(self, *args, **kwargs):\r\n super(ReviewForm, self).__init__(*args, **kwargs)\r\n self.fields[\"\"] = forms.ChoiceField(\r\n widget=forms.RadioSelect(),\r\n choices=VOTES.CHOICES\r\n )\r\n \r\nclass SpeakerCommentForm(forms.ModelForm):\r\n class Meta:\r\n model = ProposalMessage\r\n fields = [\"\"]\r\n \r\n# TODO: Add staff review form\r\nclass StaffReviewForm(forms.Form):": [],
  "from __future__ import unicode_literals\r\nfrom django import forms\r\nfrom django.utils.translation import ugettext_lazy as _\r\n \r\nfrom symposion.reviews.models import Review, Comment, ProposalMessage, VOTES\r\n \r\nclass ReviewCommentForm(forms.ModelForm):\r\n class Meta:\r\n model = Comment\r\n fields = [\"\"]\r\nclass BulkPresentationForm(forms.Form):\r\n talk_ids = forms.CharField(\r\n label=_(\"\"),\r\n max_length=500,\r\n help_text=_(\"\")\r\n )\r\nclass FeedbackForm(forms.Form):\r\n feedback_id = forms.CharField(\r\n label=_(\"\"),\r\n max_length=500, \r\n help_text=_(\"\")\r\n )\r\nclass SpeakerFeedbackForm(forms.Form):\r\n feedback_id = forms.CharField(\r\n label=_(\"\"),\r\n max_length=500, \r\n help_text=_(\"\")\r\n )\r\nclass ContingentFeedbackForm(forms.Form):\r\n feedback_id = forms.CharField(\r\n label=_(\"\"),\r\n max_length=500, \r\n help_text=_(\"\")\r\n )\r\n \r\nclass ReviewForm(forms.ModelForm):\r\n class Meta:\r\n model = Review\r\n fields = [\"\", \"\"]\r\n \r\n def __init__(self, *args, **kwargs):\r\n super(ReviewForm, self).__init__(*args, **kwargs)\r\n self.fields[\"\"] = forms.ChoiceField(\r\n widget=forms.RadioSelect(),\r\n choices=VOTES.CHOICES\r\n )\r\n \r\nclass SpeakerCommentForm(forms.ModelForm):\r\n class Meta:\r\n model = ProposalMessage\r\n fields = [\"\"]\r\n \r\n# TODO: Add staff review form\r\nclass StaffReviewForm(forms.Form): ": [],
  "from __future__ import unicode_literals\r\nfrom django import forms\r\nfrom django.utils.translation import ugettext_lazy as _\r\n \r\nfrom symposion.reviews.models import Review, Comment, ProposalMessage, VOTES\r\n \r\nclass ReviewCommentForm(forms.ModelForm):\r\n class Meta:\r\n model = Comment\r\n fields = [\"\"]\r\nclass BulkPresentationForm(forms.Form):\r\n talk_ids = forms.CharField(\r\n label=_(\"\"),\r\n max_length=500,\r\n help_text=_(\"\")\r\n )\r\nclass FeedbackForm(forms.Form):\r\n feedback_id = forms.CharField(\r\n label=_(\"\"),\r\n max_length=500, \r\n help_text=_(\"\")\r\n )\r\nclass SpeakerFeedbackForm(forms.Form):\r\n feedback_id = forms.CharField(\r\n label=_(\"\"),\r\n max_length=500, \r\n help_text=_(\"\")\r\n )\r\nclass ContingentFeedbackForm(forms.Form):\r\n feedback_id = forms.CharField(\r\n label=_(\"\"),\r\n max_length=500, \r\n help_text=_(\"\")\r\n )\r\n \r\nclass ReviewForm(forms.ModelForm):\r\n class Meta:\r\n model = Review\r\n fields = [\"\", \"\"]\r\n \r\n def __init__(self, *args, **kwargs):\r\n super(ReviewForm, self).__init__(*args, **kwargs)\r\n self.fields[\"\"] = forms.ChoiceField(\r\n widget=forms.RadioSelect(),\r\n choices=VOTES.CHOICES\r\n )\r\n \r\nclass SpeakerCommentForm(forms.ModelForm):\r\n class Meta:\r\n model = ProposalMessage\r\n fields = [\"\"]\r\n \r\n# TODO: Add staff review form\r\nclass StaffReviewForm(forms.Form):\r\n staff_ids =": [
    [
      -0.0007112558653959582,
      [
        "forms",
        ".",
        "CharField",
        "(",
        "label",
        "=",
        "_",
        "(",
        "<STR_LIT>",
        "),",
        " max",
        "_",
        "length",
        "=",
        "<NUM_LIT>",
        ",",
        " help",
        "_",
        "text",
        "=",
        "_",
        "(",
        "<STR_LIT>",
        "))"
      ]
    ],
    [
      -0.001363187477900295,
      [
        "forms",
        ".",
        "IntegerField",
        "(",
        "label",
        "=",
        "_",
        "(",
        "<STR_LIT>",
        "),",
        " max",
        "_",
        "length",
        "=",
        "<NUM_LIT>",
        ",",
        " help",
        "_",
        "text",
        "=",
        "_",
        "(",
        "<STR_LIT>",
        "))"
      ]
    ],
    [
      -0.001387540669198871,
      [
        "forms",
        ".",
        "CharField",
        "(",
        "label",
        "=",
        "_",
        "(",
        "<STR_LIT>",
        "),",
        " max",
        "_",
        "length",
        "=",
        "<NUM_LIT>",
        ",",
        " help",
        "_",
        "text",
        "=",
        "_",
        "(",
        "<STR_LIT>",
        "))"
      ]
    ],
    [
      -0.0015883018889615767,
      [
        "forms",
        ".",
        "CharField",
        "(",
        "label",
        "=",
        "_",
        "(",
        "<STR_LIT>",
        "),",
        " max",
        "_",
        "length",
        "=",
        "<NUM_LIT>",
        ",",
        " help",
        "_",
        "text",
        "=",
        "_",
        "(",
        "<STR_LIT>",
        "))"
      ]
    ],
    [
      -0.0028008422167935627,
      [
        "forms",
        ".",
        "CharField",
        "(",
        "label",
        "=",
        "<STR_LIT>",
        ")",
        "<endofline>"
      ]
    ],
    [
      -0.003113568967677798,
      [
        "forms",
        ".",
        "CharField",
        "(",
        "label",
        "=",
        "_",
        "(",
        "<STR_LIT>",
        "),",
        " max",
        "_",
        "length",
        "=",
        "<NUM_LIT>",
        ")",
        "<endofline>"
      ]
    ]
  ],
  "from django.core.mail import send_mass_mail\r\nfrom django.db.models import Q\r\nfrom django.http import HttpResponseBadRequest, HttpResponseNotAllowed\r\nfrom django.shortcuts import render, redirect, get_object_or_404\r\nfrom django.template import Context, Template\r\nfrom django.views.decorators.http import require_POST\r\n\r\nfrom account.decorators import login_required\r\n\r\n# @@@ switch to pinax-teams\r\nfrom symposion.teams.models import Team\r\n\r\nfrom symposion.conf import settings\r\nfrom symposion.proposals.models import ProposalBase, ProposalSection\r\nfrom symposion.utils.mail import send_email\r\n\r\nfrom symposion.reviews.forms import ReviewForm, SpeakerCommentForm\r\nfrom symposion.reviews.forms import BulkPresentationForm\r\nfrom symposion.reviews.forms import StaffCommentForm\r\nfrom symposion.reviews.models import (\r\n ReviewAssignment, Review, LatestVote, ProposalResult, NotificationTemplate,\r\n ResultNotification\r\n)\r\n\r\n\r\ndef proposals_generator(request, queryset, user_pk=None, check_speaker=True):\r\n\r\n for obj in queryset:\r\n # @@@ this sucks; we can do better\r\n if check_speaker:\r\n if request.user in [s.user for s in obj.speakers()]:\r\n continue\r\n\r\n try:\r\n obj.result\r\n except ProposalResult.DoesNotExist:\r\n ProposalResult.objects.get_or_create(proposal=obj)\r\n\r\n obj.comment_count = obj.result.comment_count\r\n obj.total_votes = obj.result.vote_count\r\n obj.plus_one = obj.result.plus_one\r\n obj.plus_zero = obj.result.plus_zero\r\n obj.minus_zero = obj.result.minus_zero\r\n obj.minus_one = obj.result.minus_one\r\n lookup_params = dict(proposal=obj)\r\n\r\n if user_pk:\r\n lookup_params[\"\"] = user_pk\r\n else:\r\n lookup_params[\"\"] = request.user\r\n\r\n try:\r\n obj.user_vote = LatestVote.objects.get(**lookup_params).vote\r\n obj.user_vote_css = LatestVote.objects.get(**lookup_params).css_class()\r\n except LatestVote.DoesNotExist:\r\n obj.user_vote = None\r\n obj.user_vote_css = \"\"\r\n\r\n yield obj\r\n\r\ndef access_not_permitted(request,error_message):\r\n return render(request, \"\", error_message)\r\n\r\n\r\n# Returns a list of all proposals, proposals reviewed by the user, or the proposals the user has\r\n# yet to review depending on the link user clicks in dashboard\r\n@login_required\r\ndef review_section(request_review, section_slug, assigned=False, reviewed=\"\"):\r\n\r\n if not request_review.user.has_perm(\"\" % section_slug):\r\n return render(request_review, \"\",\"\")\r\n\r\n section = get_object_or_404(ProposalSection, section__slug=section_slug)\r\n queryset = ProposalBase.objects.filter(kind__section=section.section)\r\n\r\n if assigned:\r\n assignments = ReviewAssignment.objects.filter(user=request_review.user)\\\r\n .values_list(\"\")\r\n queryset = queryset.filter(id__in=assignments)\r\n\r\n # passing reviewed in from reviews.urls and out to review_list for\r\n # appropriate template header rendering\r\n if reviewed == \"\":\r\n queryset = queryset.select_related(\"\").select_subclasses()\r\n reviewed = \"\"\r\n elif reviewed == \"\":\r\n queryset = queryset.filter(reviews__user=request_review.user)\r\n reviewed = \"\"\r\n else:\r\n queryset = queryset.exclude(reviews__user=request_review.user).exclude(\r\n speaker__user=request_review.user)\r\n reviewed = \"\"\r\n\r\n proposals = proposals_generator(request_review, queryset)\r\n\r\n ctx = {\r\n \"\": proposals,\r\n \"\": section,\r\n \"\": reviewed,\r\n }\r\n\r\n return render(request_review, \"\", ctx)\r\n\r\n\r\n@login_required\r\ndef review_list(request_review_list, section_slug, user_pk):\r\n\r\n # if they''t the person whose\r\n # review list is being asked for, don't let them in\r\n if not request_review_list.user.has_perm(\"\" % section_slug):\r\n if not request_review_list.user.pk == user_pk:\r\n return render(request_review_list, \"\", \"\")\r\n\r\n queryset = ProposalBase.objects.select_related(\"\", \"\")\r\n reviewed = LatestVote.objects.filter(user__pk=user_pk).values_list(\"\", flat=True)\r\n queryset = queryset.filter(pk__in=reviewed)\r\n proposals = queryset.order_by(\"\")\r\n\r\n admin = request_review_list.user.has_perm(\"\" % section_slug)\r\n\r\n proposals = proposals_generator(request_review_list, proposals, user_pk=user_pk, check_speaker=not admin)\r\n\r\n ctx = {\r\n \"\": proposals,\r\n }\r\n return render(request_review_list, \"\", ctx)\r\n\r\n\r\n@login_required\r\ndef review_admin(request_review_admin, section_slug):\r\n\r\n if not request_review_admin.user.has_perm(\"\" % section_slug):\r\n return render(request_review_admin, \"\", \"\")\r\n\r\n def reviewers():\r\n already_seen = set()\r\n\r\n for team in Team.objects.filter(permissions__codename=\"\" % section_slug):\r\n for membership in team.memberships.filter(Q(state=\"\") | Q(state=\"\")):\r\n user = membership.user\r\n if user.pk in already_seen:\r\n continue\r\n already_seen.add(user.pk)\r\n\r\n user.comment_count = Review.objects.filter(user=user).count()\r\n user.total_votes = LatestVote.objects.filter(user=user).count()\r\n user.plus_one = LatestVote.objects.filter(\r\n user=user,\r\n vote=LatestVote.VOTES.PLUS_ONE\r\n ).count()\r\n user.plus_zero = LatestVote.objects.filter(\r\n user=user,\r\n vote=LatestVote.VOTES.PLUS_ZERO\r\n ).count()\r\n user.minus_zero = LatestVote.objects.filter(\r\n user=user,\r\n vote=LatestVote.VOTES.MINUS_ZERO\r\n ).count()\r\n user.minus_one = LatestVote.objects.filter(\r\n user=user,\r\n vote=LatestVote.VOTES.MINUS_ONE\r\n ).count()\r\n\r\n yield user\r\n\r\n ctx = {\r\n \"\": section_slug,\r\n \"\": reviewers(),\r\n }\r\n return render(request_review_admin, \"\", ctx)\r\n\r\n@login_required\r\ndef review_detail(request_review_detail, pk):\r\n\r\n proposals = ProposalBase.objects.select_related(\"\").select_subclasses()\r\n proposal = get_object_or_404(proposals, pk=pk)\r\n\r\n if not request_review_detail.user.has_perm(\"\" % proposal.kind.section.slug):\r\n return render(request_review_detail, \"\", \"\")\r\n\r\n speakers = [s.user for s in proposal.speakers()]\r\n\r\n if not request_review_detail.user.is_superuser and request_review_detail.user in speakers:\r\n return render(request_review_detail, \"\", \"\")\r\n\r\n admin = request_review_detail.user.is_staff\r\n\r\n try:\r\n latest_vote = LatestVote.objects.get(proposal=proposal, user=request_review_detail.user)\r\n except LatestVote.DoesNotExist:\r\n latest_vote = None\r\n\r\n if request_review_detail.method == \"\":\r\n if request_review_detail.user in speakers:\r\n return render(request_review_detail, \"\", \"\")\r\n\r\n if \"\" in request_review_detail.POST:\r\n review_form = ReviewForm(request_review_detail.POST)\r\n if review_form.is_valid():\r\n\r\n review = review_form.save(commit=False)\r\n review.user = request_review_detail.user\r\n review.proposal = proposal\r\n review.save()\r\n\r\n return redirect(request_review_detail.path)\r\n else:\r\n message_form = SpeakerCommentForm()\r\n elif \"\" in request_review_detail.POST:\r\n message_form = SpeakerCommentForm(request_review_detail.POST)\r\n if message_form.is_valid():\r\n\r\n message = message_form.save(commit=False)\r\n message.user = request_review_detail.user\r\n message.proposal = proposal\r\n message.save()\r\n\r\n for speaker in speakers:\r\n if speaker and speaker.email:\r\n ctx = {\r\n \"\": proposal,\r\n \"\": message,\r\n \"\": False,\r\n }\r\n send_email(\r\n [speaker.email], \"\",\r\n context=ctx\r\n )\r\n\r\n return redirect(request_review_detail.path)\r\n else:\r\n initial = {}\r\n if latest_vote:\r\n initial[\"\"] = latest_vote.vote\r\n if request_review_detail.user in speakers:\r\n review_form = None\r\n else:\r\n review_form = ReviewForm(initial=initial)\r\n elif \"\" in request_review_detail.POST:\r\n if admin:\r\n result = request_review_detail.POST[\"\"]\r\n\r\n if result == \"\":\r\n proposal.result.status = \"\"\r\n proposal.result.save()\r\n elif result == \"\":\r\n proposal.result.status = \"\"\r\n proposal.result.save()\r\n elif result == \"\":\r\n proposal.result.status = \"\"\r\n proposal.result.save()\r\n elif result == \"\":\r\n proposal.result.status = \"\"\r\n proposal.result.save()\r\n\r\n return redirect(request_review_detail.path)\r\n else:\r\n initial = {}\r\n if latest_vote:\r\n initial[\"\"] = latest_vote.vote\r\n if request_review_detail.user in speakers:\r\n review_form = None\r\n else:\r\n review_form = ReviewForm(initial=initial)\r\n message_form = SpeakerCommentForm()\r\n\r\n proposal.comment_count = proposal.result.comment_count\r\n proposal.total_votes = proposal.result.vote_count\r\n proposal.plus_one = proposal.result.plus_one\r\n proposal.plus_zero = proposal.result.plus_zero\r\n proposal.minus_zero = proposal.result.minus_zero\r\n proposal.minus_one = proposal.result.minus_one\r\n\r\n reviews = Review.objects.filter(proposal=proposal).order_by(\"\")\r\n messages = proposal.messages.order_by(\"\")\r\n\r\n return render(request_review_detail, \"\", {\r\n \"\": proposal,\r\n \"\": latest_vote,\r\n \"\": reviews,\r\n \"\": messages,\r\n \"\": review_form,\r\n \"\": message_form\r\n })\r\n\r\n\r\n@login_required\r\n@require_POST\r\ndef review_delete(request_delete, pk):\r\n review = get_object_or_404(Review, pk=pk)\r\n section_slug = review.section.slug\r\n\r\n if not request_delete.user.has_perm(\"\" % section_slug):\r\n return render(request_delete, \"\", \"\")\r\n\r\n review = get_object_or_404(Review, pk=pk)\r\n review.delete()\r\n\r\n return redirect(\"\", pk=review.proposal.pk)\r\n\r\n\r\n@login_required\r\ndef review_status(request_review_status, section_slug=None, key=None):\r\n\r\n if not request_review_status.user.has_perm(\"\" % section_slug):\r\n return render(request_review_status, \"\", \"\")\r\n\r\n VOTE_THRESHOLD = settings.SYMPOSION_VOTE_THRESHOLD\r\n\r\n ctx = {\r\n \"\": section_slug,\r\n \"\": VOTE_THRESHOLD,\r\n }\r\n\r\n queryset = ProposalBase.objects.select_related(\"\", \"\").select_subclasses()\r\n if section_slug:\r\n queryset = queryset.filter(kind__section__slug=section_slug)\r\n\r\n proposals = {\r\n # proposals with at least VOTE_THRESHOLD reviews and at least one +1 and no -1s, sorted by\r\n # the ''\r\n \"\": queryset.filter(result__vote_count__gte=VOTE_THRESHOLD, result__plus_one__gt=0,\r\n result__minus_one=0).order_by(\"\"),\r\n # proposals with at least VOTE_THRESHOLD reviews and at least one -1 and no +1s, reverse\r\n # sorted by the ''\r\n \"\": queryset.filter(result__vote_count__gte=VOTE_THRESHOLD, result__minus_one__gt=0,\r\n result__plus_one=0).order_by(\"\"),\r\n # proposals with at least VOTE_THRESHOLD reviews and neither a +1 or a -1, sorted by total\r\n # votes (lowest first)\r\n \"\": queryset.filter(result__vote_count__gte=VOTE_THRESHOLD, result__minus_one=0,\r\n result__plus_one=0).order_by(\"\"),\r\n # proposals with at least VOTE_THRESHOLD reviews and both a +1 and -1, sorted by total\r\n # votes (highest first)\r\n \"\": queryset.filter(result__vote_count__gte=VOTE_THRESHOLD,\r\n result__plus_one__gt=0, result__minus_one__gt=0)\r\n .order_by(\"\"),\r\n # proposals with fewer than VOTE_THRESHOLD reviews\r\n \"\": queryset.filter(result__vote_count__lt=VOTE_THRESHOLD)\r\n .order_by(\"\"),\r\n }\r\n\r\n admin = request_review_status.user.has_perm(\"\" % section_slug)\r\n\r\n for status in proposals:\r\n if key and key != status:\r\n continue\r\n proposals[status] = list(proposals_generator(request_review_status, proposals[status], check_speaker=not admin))\r\n\r\n if key:\r\n ctx.update({\r\n \"\": key,\r\n \"\": proposals[key],\r\n })\r\n else:\r\n ctx[\"\"] = proposals\r\n\r\n return render(request_review_status, \"\", ctx)\r\n\r\n\r\n@login_required\r\ndef review_assignments(request_review_assignments):\r\n if not request_review_assignments.user.groups.filter(name=\"\").exists():\r\n return render(request_review_assignments, \"\", \"\")\r\n assignments = ReviewAssignment.objects.filter(\r\n user=request_review_assignments.user,\r\n opted_out=False\r\n )\r\n return render(request_review_assignments, \"\", {\r\n \"\": assignments,\r\n })\r\n\r\n\r\n@login_required\r\n@require_POST\r\ndef review_assignment_opt_out(request_review_assignment_opt_out, pk):\r\n review_assignment = get_object_or_404(\r\n ReviewAssignment, pk=pk, user=request_review_assignment_opt_out.user)\r\n if not review_assignment.opted_out:\r\n review_assignment.opted_out = True\r\n review_assignment.save()\r\n ReviewAssignment.create_assignments(\r\n review_assignment.proposal, origin=ReviewAssignment.AUTO_ASSIGNED_LATER)\r\n return redirect(\"\")\r\n\r\n\r\n@login_required\r\ndef review_bulk_accept(request_review_bulk_accept, section_slug):\r\n if not request_review_bulk_accept.user.has_perm(\"\" % section_slug):\r\n return render(request_review_bulk_accept, \"\", \"\")\r\n if request_review_bulk_accept.method == \"\":\r\n form = BulkPresentationForm(request_review_bulk_accept.POST)\r\n if form.is_valid():\r\n talk_ids = form.cleaned_data[\"\"].split(\"\")\r\n talks = ProposalBase.objects.filter(id__in=talk_ids).select_related(\"\")\r\n for talk in talks:\r\n talk.result.status = \"\"\r\n talk.result.save()\r\n return redirect(\"\", section_slug=section_slug)\r\n else:\r\n form = BulkPresentationForm()\r\n\r\n return render(request_review_bulk_accept, \"\", {\r\n \"\": form,\r\n })\r\n\r\n\r\n@login_required\r\ndef result_notification(request_result_notification, section_slug, status):\r\n if not request_result_notification.user.has_perm(\"\" % section_slug):\r\n return render(request_result_notification, \"\", \"\")\r\n\r\n proposals = ProposalBase.objects.filter(kind__section__slug=section_slug, result__status=status).select_related(\"\", \"\").select_subclasses()\r\n notification_templates = NotificationTemplate.objects.all()\r\n\r\n ctx = {\r\n \"\": section_slug,\r\n \"\": status,\r\n \"\": proposals,\r\n \"\": notification_templates,\r\n }\r\n return render(request_result_notification, \"\", ctx)\r\n\r\n\r\n@login_required\r\ndef result_notification_prepare(request_result_notification_prepare, section_slug, status):\r\n if request_result_notification_prepare.method != \"\":\r\n return HttpResponseNotAllowed([\"\"])\r\n\r\n if not request_result_notification_prepare.user.has_perm(\"\" % section_slug):\r\n return render(request_result_notification_prepare, \"\", \"\")\r\n\r\n proposal_pks = []\r\n try:\r\n for pk in request_result_notification_prepare.POST.getlist(\"\"):\r\n proposal_pks.append(int(pk))\r\n except ValueError:\r\n return HttpResponseBadRequest()\r\n proposals = ProposalBase.objects.filter(\r\n kind__section__slug=section_slug,\r\n result__status=status,\r\n )\r\n proposals = proposals.filter(pk__in=proposal_pks)\r\n proposals = proposals.select_related(\"\", \"\")\r\n proposals = proposals.select_subclasses()\r\n\r\n notification_template_pk = request_result_notification_prepare.POST.get(\"\", \"\")\r\n if notification_template_pk:\r\n notification_template = NotificationTemplate.objects.get(pk=notification_template_pk)\r\n else:\r\n notification_template = None\r\n\r\n ctx = {\r\n \"\": section_slug,\r\n \"\": status,\r\n \"\": notification_template,\r\n \"\": proposals,\r\n \"\": \"\".join([str(pk) for pk in proposal_pks]),\r\n }\r\n return render(request_result_notification_prepare, \"\", ctx)\r\n\r\ndef accept_staff_suggestion(staffId):\r\n return \r\n\r\n@login_required\r\ndef result_notification_send(request_result_notification_send, section_slug, status):\r\n if request_result_notification_send.method != \"\":\r\n return HttpResponseNotAllowed([\"\"])\r\n\r\n if not request_result_notification_send.user.has_perm(\"\" % section_slug):\r\n return render(request_result_notification_send, \"\", \"\")\r\n\r\n if not all([k in request_result_notification_send.POST for k in [\"\", \"\", \"\", \"\"]]):\r\n return HttpResponseBadRequest()\r\n\r\n try:\r\n proposal_pks = [int(pk) for pk in request_result_notification_send.POST[\"\"].split(\"\")]\r\n except ValueError:\r\n return HttpResponseBadRequest()\r\n\r\n proposals = ProposalBase.objects.filter(\r\n kind__section__slug=section_slug,\r\n result__status=status,\r\n )\r\n proposals = proposals.filter(pk__in=proposal_pks)\r\n proposals = proposals.select_related(\"\", \"\")\r\n proposals = proposals.select_subclasses()\r\n\r\n notification_template_pk = request_result_notification_send.POST.get(\"\", \"\")\r\n if notification_template_pk:\r\n notification_template = NotificationTemplate.objects.get(pk=notification_template_pk)\r\n else:\r\n notification_template = None\r\n\r\n emails = []\r\n\r\n for proposal in proposals:\r\n rn = ResultNotification()\r\n rn.proposal = proposal\r\n rn.template = notification_template\r\n rn.to_address = proposal.speaker_email\r\n rn.from_address = request_result_notification_send.POST[\"\"]\r\n rn.subject = request_result_notification_send.POST[\"\"]\r\n rn.body = Template(request_result_notification_send.POST[\"\"]).render(\r\n Context({\r\n \"\": proposal.notification_email_context()\r\n })\r\n )\r\n rn.save()\r\n emails.append(rn.email_args)\r\n\r\n send_mass_mail(emails)\r\n\r\n return redirect(\"\", section_slug=section_slug, status=status)\r\n\r\n\r\n\r\n@login_required\r\ndef review_staff_comment(request_review_staff_comment, section_slug):\r\n if not request_review_staff_comment.user.has_perm(\"\" % section_slug):\r\n return render(request_review_staff_comment,\"\", \"\")\r\n if request_review_staff_comment.method == \"\":\r\n form = StaffCommentForm(request_review_staff_comment.POST)\r\n # TODO: complete implementation of staff comment form - split and mark accepted \r\n # ": [
    [
      -0.000773545368079655,
      [
        "Form",
        "Data",
        "(",
        "request",
        "_",
        "review",
        "_",
        "staff",
        "_",
        "comment",
        ".",
        "form",
        ")",
        "<unk>",
        "Form",
        "Data",
        "(",
        "request",
        "_",
        "review",
        "_"
      ]
    ],
    [
      -0.0013213688336415601,
      [
        "forms",
        ".",
        "Admin",
        "Comment",
        "Form",
        "(",
        "request",
        "_",
        "review",
        "_",
        "staff",
        "_",
        "comment",
        ".",
        "form",
        ")",
        "<unk>",
        "forms",
        ".",
        "Admin",
        "Comment"
      ]
    ],
    [
      -0.002194786030191789,
      [
        "staff",
        "_",
        "user",
        "=",
        "request",
        "_",
        "review",
        "_",
        "staff",
        "_",
        "comment",
        ".",
        "user",
        "<endofline>"
      ]
    ],
    [
      -0.0022924818506569484,
      [
        "Form",
        "Data",
        ".",
        "objects",
        ".",
        "get",
        "(",
        "pk",
        "=",
        "request",
        "_",
        "review",
        "_",
        "staff",
        "_",
        "comment",
        ".",
        "pk",
        ")",
        "<endofline>"
      ]
    ],
    [
      -0.003055935510219201,
      [
        "Admin",
        "Comment",
        "Form",
        "(",
        "request",
        "_",
        "review",
        "_",
        "staff",
        "_",
        "comment",
        ".",
        "form",
        ")",
        "<unk>",
        "Admin",
        "Comment",
        "Form",
        "(",
        "request",
        "_"
      ]
    ],
    [
      -0.003491993588713205,
      [
        "request",
        ".",
        "POST",
        ".",
        "update",
        "(",
        "{",
        "<STR_LIT>",
        ":",
        "section",
        "_",
        "slug",
        ",",
        "<STR_LIT>",
        ":",
        "request",
        "_",
        "review"
      ]
    ],
    [
      -0.0036811600780308146,
      [
        "request",
        ".",
        "POST",
        ".",
        "update",
        "(",
        "{",
        "<STR_LIT>",
        ":",
        "section",
        "_",
        "slug",
        "})",
        "<endofline>"
      ]
    ],
    [
      -0.003731184149394138,
      [
        "request",
        "_",
        "review",
        "_",
        "staff",
        "_",
        "comment",
        ".",
        "save",
        "()",
        "<endofline>"
      ]
    ],
    [
      -0.0037451880379518712,
      [
        "section",
        "_",
        "slug",
        "=",
        "section",
        "_",
        "slug",
        "<unk>",
        "section",
        "_",
        "slug",
        "<endofline>"
      ]
    ],
    [
      -0.0037924381027525447,
      [
        "{",
        "<STR_LIT>",
        ":",
        "section",
        "_",
        "slug",
        "}",
        "<endofline>"
      ]
    ],
    [
      -0.00442436199353847,
      [
        "request",
        "_",
        "review",
        "_",
        "staff",
        "_",
        "comment",
        ".",
        "is",
        "_",
        "valid",
        "()",
        "<endofline>"
      ]
    ],
    [
      -0.004574043657848655,
      [
        "Admin",
        "Comment",
        "Form",
        "(",
        "request",
        "_",
        "review",
        "_",
        "staff",
        "_",
        "comment",
        ".",
        "POST",
        ")",
        "<endofline>"
      ]
    ],
    [
      -0.004812451903052207,
      [
        "section",
        "_",
        "slug",
        "=",
        "section",
        "_",
        "slug",
        "<endofline>"
      ]
    ],
    [
      -0.005181933251194352,
      [
        "Form",
        "Data",
        "(",
        "request",
        "_",
        "review",
        "_",
        "staff",
        "_",
        "comment",
        ".",
        "POST",
        ")",
        "<endofline>"
      ]
    ],
    [
      -0.006304239254690576,
      [
        "Form",
        "Data",
        ".",
        "objects",
        ".",
        "get",
        "(",
        "pk",
        "=",
        "request",
        "_",
        "review",
        "_",
        "staff",
        "_",
        "comment",
        ".",
        "pk",
        ")",
        ".",
        "form",
        "<endofline>"
      ]
    ]
  ],
  "from django.core.mail import send_mass_mail\r\nfrom django.db.models import Q\r\nfrom django.http import HttpResponseBadRequest, HttpResponseNotAllowed\r\nfrom django.shortcuts import render, redirect, get_object_or_404\r\nfrom django.template import Context, Template\r\nfrom django.views.decorators.http import require_POST\r\n\r\nfrom account.decorators import login_required\r\n\r\n# @@@ switch to pinax-teams\r\nfrom symposion.teams.models import Team\r\n\r\nfrom symposion.conf import settings\r\nfrom symposion.proposals.models import ProposalBase, ProposalSection\r\nfrom symposion.utils.mail import send_email\r\n\r\nfrom symposion.reviews.forms import ReviewForm, SpeakerCommentForm\r\nfrom symposion.reviews.forms import BulkPresentationForm\r\nfrom symposion.reviews.forms import StaffCommentForm\r\nfrom symposion.reviews.models import (\r\n ReviewAssignment, Review, LatestVote, ProposalResult, NotificationTemplate,\r\n ResultNotification\r\n)\r\n\r\n\r\ndef proposals_generator(request, queryset, user_pk=None, check_speaker=True):\r\n\r\n for obj in queryset:\r\n # @@@ this sucks; we can do better\r\n if check_speaker:\r\n if request.user in [s.user for s in obj.speakers()]:\r\n continue\r\n\r\n try:\r\n obj.result\r\n except ProposalResult.DoesNotExist:\r\n ProposalResult.objects.get_or_create(proposal=obj)\r\n\r\n obj.comment_count = obj.result.comment_count\r\n obj.total_votes = obj.result.vote_count\r\n obj.plus_one = obj.result.plus_one\r\n obj.plus_zero = obj.result.plus_zero\r\n obj.minus_zero = obj.result.minus_zero\r\n obj.minus_one = obj.result.minus_one\r\n lookup_params = dict(proposal=obj)\r\n\r\n if user_pk:\r\n lookup_params[\"\"] = user_pk\r\n else:\r\n lookup_params[\"\"] = request.user\r\n\r\n try:\r\n obj.user_vote = LatestVote.objects.get(**lookup_params).vote\r\n obj.user_vote_css = LatestVote.objects.get(**lookup_params).css_class()\r\n except LatestVote.DoesNotExist:\r\n obj.user_vote = None\r\n obj.user_vote_css = \"\"\r\n\r\n yield obj\r\n\r\ndef access_not_permitted(request,error_message):\r\n return render(request, \"\", error_message)\r\n\r\n\r\n# Returns a list of all proposals, proposals reviewed by the user, or the proposals the user has\r\n# yet to review depending on the link user clicks in dashboard\r\n@login_required\r\ndef review_section(request_review, section_slug, assigned=False, reviewed=\"\"):\r\n\r\n if not request_review.user.has_perm(\"\" % section_slug):\r\n return render(request_review, \"\",\"\")\r\n\r\n section = get_object_or_404(ProposalSection, section__slug=section_slug)\r\n queryset = ProposalBase.objects.filter(kind__section=section.section)\r\n\r\n if assigned:\r\n assignments = ReviewAssignment.objects.filter(user=request_review.user)\\\r\n .values_list(\"\")\r\n queryset = queryset.filter(id__in=assignments)\r\n\r\n # passing reviewed in from reviews.urls and out to review_list for\r\n # appropriate template header rendering\r\n if reviewed == \"\":\r\n queryset = queryset.select_related(\"\").select_subclasses()\r\n reviewed = \"\"\r\n elif reviewed == \"\":\r\n queryset = queryset.filter(reviews__user=request_review.user)\r\n reviewed = \"\"\r\n else:\r\n queryset = queryset.exclude(reviews__user=request_review.user).exclude(\r\n speaker__user=request_review.user)\r\n reviewed = \"\"\r\n\r\n proposals = proposals_generator(request_review, queryset)\r\n\r\n ctx = {\r\n \"\": proposals,\r\n \"\": section,\r\n \"\": reviewed,\r\n }\r\n\r\n return render(request_review, \"\", ctx)\r\n\r\n\r\n@login_required\r\ndef review_list(request_review_list, section_slug, user_pk):\r\n\r\n # if they''t the person whose\r\n # review list is being asked for, don't let them in\r\n if not request_review_list.user.has_perm(\"\" % section_slug):\r\n if not request_review_list.user.pk == user_pk:\r\n return render(request_review_list, \"\", \"\")\r\n\r\n queryset = ProposalBase.objects.select_related(\"\", \"\")\r\n reviewed = LatestVote.objects.filter(user__pk=user_pk).values_list(\"\", flat=True)\r\n queryset = queryset.filter(pk__in=reviewed)\r\n proposals = queryset.order_by(\"\")\r\n\r\n admin = request_review_list.user.has_perm(\"\" % section_slug)\r\n\r\n proposals = proposals_generator(request_review_list, proposals, user_pk=user_pk, check_speaker=not admin)\r\n\r\n ctx = {\r\n \"\": proposals,\r\n }\r\n return render(request_review_list, \"\", ctx)\r\n\r\n\r\n@login_required\r\ndef review_admin(request_review_admin, section_slug):\r\n\r\n if not request_review_admin.user.has_perm(\"\" % section_slug):\r\n return render(request_review_admin, \"\", \"\")\r\n\r\n def reviewers():\r\n already_seen = set()\r\n\r\n for team in Team.objects.filter(permissions__codename=\"\" % section_slug):\r\n for membership in team.memberships.filter(Q(state=\"\") | Q(state=\"\")):\r\n user = membership.user\r\n if user.pk in already_seen:\r\n continue\r\n already_seen.add(user.pk)\r\n\r\n user.comment_count = Review.objects.filter(user=user).count()\r\n user.total_votes = LatestVote.objects.filter(user=user).count()\r\n user.plus_one = LatestVote.objects.filter(\r\n user=user,\r\n vote=LatestVote.VOTES.PLUS_ONE\r\n ).count()\r\n user.plus_zero = LatestVote.objects.filter(\r\n user=user,\r\n vote=LatestVote.VOTES.PLUS_ZERO\r\n ).count()\r\n user.minus_zero = LatestVote.objects.filter(\r\n user=user,\r\n vote=LatestVote.VOTES.MINUS_ZERO\r\n ).count()\r\n user.minus_one = LatestVote.objects.filter(\r\n user=user,\r\n vote=LatestVote.VOTES.MINUS_ONE\r\n ).count()\r\n\r\n yield user\r\n\r\n ctx = {\r\n \"\": section_slug,\r\n \"\": reviewers(),\r\n }\r\n return render(request_review_admin, \"\", ctx)\r\n\r\n@login_required\r\ndef review_detail(request_review_detail, pk):\r\n\r\n proposals = ProposalBase.objects.select_related(\"\").select_subclasses()\r\n proposal = get_object_or_404(proposals, pk=pk)\r\n\r\n if not request_review_detail.user.has_perm(\"\" % proposal.kind.section.slug):\r\n return render(request_review_detail, \"\", \"\")\r\n\r\n speakers = [s.user for s in proposal.speakers()]\r\n\r\n if not request_review_detail.user.is_superuser and request_review_detail.user in speakers:\r\n return render(request_review_detail, \"\", \"\")\r\n\r\n admin = request_review_detail.user.is_staff\r\n\r\n try:\r\n latest_vote = LatestVote.objects.get(proposal=proposal, user=request_review_detail.user)\r\n except LatestVote.DoesNotExist:\r\n latest_vote = None\r\n\r\n if request_review_detail.method == \"\":\r\n if request_review_detail.user in speakers:\r\n return render(request_review_detail, \"\", \"\")\r\n\r\n if \"\" in request_review_detail.POST:\r\n review_form = ReviewForm(request_review_detail.POST)\r\n if review_form.is_valid():\r\n\r\n review = review_form.save(commit=False)\r\n review.user = request_review_detail.user\r\n review.proposal = proposal\r\n review.save()\r\n\r\n return redirect(request_review_detail.path)\r\n else:\r\n message_form = SpeakerCommentForm()\r\n elif \"\" in request_review_detail.POST:\r\n message_form = SpeakerCommentForm(request_review_detail.POST)\r\n if message_form.is_valid():\r\n\r\n message = message_form.save(commit=False)\r\n message.user = request_review_detail.user\r\n message.proposal = proposal\r\n message.save()\r\n\r\n for speaker in speakers:\r\n if speaker and speaker.email:\r\n ctx = {\r\n \"\": proposal,\r\n \"\": message,\r\n \"\": False,\r\n }\r\n send_email(\r\n [speaker.email], \"\",\r\n context=ctx\r\n )\r\n\r\n return redirect(request_review_detail.path)\r\n else:\r\n initial = {}\r\n if latest_vote:\r\n initial[\"\"] = latest_vote.vote\r\n if request_review_detail.user in speakers:\r\n review_form = None\r\n else:\r\n review_form = ReviewForm(initial=initial)\r\n elif \"\" in request_review_detail.POST:\r\n if admin:\r\n result = request_review_detail.POST[\"\"]\r\n\r\n if result == \"\":\r\n proposal.result.status = \"\"\r\n proposal.result.save()\r\n elif result == \"\":\r\n proposal.result.status = \"\"\r\n proposal.result.save()\r\n elif result == \"\":\r\n proposal.result.status = \"\"\r\n proposal.result.save()\r\n elif result == \"\":\r\n proposal.result.status = \"\"\r\n proposal.result.save()\r\n\r\n return redirect(request_review_detail.path)\r\n else:\r\n initial = {}\r\n if latest_vote:\r\n initial[\"\"] = latest_vote.vote\r\n if request_review_detail.user in speakers:\r\n review_form = None\r\n else:\r\n review_form = ReviewForm(initial=initial)\r\n message_form = SpeakerCommentForm()\r\n\r\n proposal.comment_count = proposal.result.comment_count\r\n proposal.total_votes = proposal.result.vote_count\r\n proposal.plus_one = proposal.result.plus_one\r\n proposal.plus_zero = proposal.result.plus_zero\r\n proposal.minus_zero = proposal.result.minus_zero\r\n proposal.minus_one = proposal.result.minus_one\r\n\r\n reviews = Review.objects.filter(proposal=proposal).order_by(\"\")\r\n messages = proposal.messages.order_by(\"\")\r\n\r\n return render(request_review_detail, \"\", {\r\n \"\": proposal,\r\n \"\": latest_vote,\r\n \"\": reviews,\r\n \"\": messages,\r\n \"\": review_form,\r\n \"\": message_form\r\n })\r\n\r\n\r\n@login_required\r\n@require_POST\r\ndef review_delete(request_delete, pk):\r\n review = get_object_or_404(Review, pk=pk)\r\n section_slug = review.section.slug\r\n\r\n if not request_delete.user.has_perm(\"\" % section_slug):\r\n return render(request_delete, \"\", \"\")\r\n\r\n review = get_object_or_404(Review, pk=pk)\r\n review.delete()\r\n\r\n return redirect(\"\", pk=review.proposal.pk)\r\n\r\n\r\n@login_required\r\ndef review_status(request_review_status, section_slug=None, key=None):\r\n\r\n if not request_review_status.user.has_perm(\"\" % section_slug):\r\n return render(request_review_status, \"\", \"\")\r\n\r\n VOTE_THRESHOLD = settings.SYMPOSION_VOTE_THRESHOLD\r\n\r\n ctx = {\r\n \"\": section_slug,\r\n \"\": VOTE_THRESHOLD,\r\n }\r\n\r\n queryset = ProposalBase.objects.select_related(\"\", \"\").select_subclasses()\r\n if section_slug:\r\n queryset = queryset.filter(kind__section__slug=section_slug)\r\n\r\n proposals = {\r\n # proposals with at least VOTE_THRESHOLD reviews and at least one +1 and no -1s, sorted by\r\n # the ''\r\n \"\": queryset.filter(result__vote_count__gte=VOTE_THRESHOLD, result__plus_one__gt=0,\r\n result__minus_one=0).order_by(\"\"),\r\n # proposals with at least VOTE_THRESHOLD reviews and at least one -1 and no +1s, reverse\r\n # sorted by the ''\r\n \"\": queryset.filter(result__vote_count__gte=VOTE_THRESHOLD, result__minus_one__gt=0,\r\n result__plus_one=0).order_by(\"\"),\r\n # proposals with at least VOTE_THRESHOLD reviews and neither a +1 or a -1, sorted by total\r\n # votes (lowest first)\r\n \"\": queryset.filter(result__vote_count__gte=VOTE_THRESHOLD, result__minus_one=0,\r\n result__plus_one=0).order_by(\"\"),\r\n # proposals with at least VOTE_THRESHOLD reviews and both a +1 and -1, sorted by total\r\n # votes (highest first)\r\n \"\": queryset.filter(result__vote_count__gte=VOTE_THRESHOLD,\r\n result__plus_one__gt=0, result__minus_one__gt=0)\r\n .order_by(\"\"),\r\n # proposals with fewer than VOTE_THRESHOLD reviews\r\n \"\": queryset.filter(result__vote_count__lt=VOTE_THRESHOLD)\r\n .order_by(\"\"),\r\n }\r\n\r\n admin = request_review_status.user.has_perm(\"\" % section_slug)\r\n\r\n for status in proposals:\r\n if key and key != status:\r\n continue\r\n proposals[status] = list(proposals_generator(request_review_status, proposals[status], check_speaker=not admin))\r\n\r\n if key:\r\n ctx.update({\r\n \"\": key,\r\n \"\": proposals[key],\r\n })\r\n else:\r\n ctx[\"\"] = proposals\r\n\r\n return render(request_review_status, \"\", ctx)\r\n\r\n\r\n@login_required\r\ndef review_assignments(request_review_assignments):\r\n if not request_review_assignments.user.groups.filter(name=\"\").exists():\r\n return render(request_review_assignments, \"\", \"\")\r\n assignments = ReviewAssignment.objects.filter(\r\n user=request_review_assignments.user,\r\n opted_out=False\r\n )\r\n return render(request_review_assignments, \"\", {\r\n \"\": assignments,\r\n })\r\n\r\n\r\n@login_required\r\n@require_POST\r\ndef review_assignment_opt_out(request_review_assignment_opt_out, pk):\r\n review_assignment = get_object_or_404(\r\n ReviewAssignment, pk=pk, user=request_review_assignment_opt_out.user)\r\n if not review_assignment.opted_out:\r\n review_assignment.opted_out = True\r\n review_assignment.save()\r\n ReviewAssignment.create_assignments(\r\n review_assignment.proposal, origin=ReviewAssignment.AUTO_ASSIGNED_LATER)\r\n return redirect(\"\")\r\n\r\n\r\n@login_required\r\ndef review_bulk_accept(request_review_bulk_accept, section_slug):\r\n if not request_review_bulk_accept.user.has_perm(\"\" % section_slug):\r\n return render(request_review_bulk_accept, \"\", \"\")\r\n if request_review_bulk_accept.method == \"\":\r\n form = BulkPresentationForm(request_review_bulk_accept.POST)\r\n if form.is_valid():\r\n talk_ids = form.cleaned_data[\"\"].split(\"\")\r\n talks = ProposalBase.objects.filter(id__in=talk_ids).select_related(\"\")\r\n for talk in talks:\r\n talk.result.status = \"\"\r\n talk.result.save()\r\n return redirect(\"\", section_slug=section_slug)\r\n else:\r\n form = BulkPresentationForm()\r\n\r\n return render(request_review_bulk_accept, \"\", {\r\n \"\": form,\r\n })\r\n\r\n\r\n@login_required\r\ndef result_notification(request_result_notification, section_slug, status):\r\n if not request_result_notification.user.has_perm(\"\" % section_slug):\r\n return render(request_result_notification, \"\", \"\")\r\n\r\n proposals = ProposalBase.objects.filter(kind__section__slug=section_slug, result__status=status).select_related(\"\", \"\").select_subclasses()\r\n notification_templates = NotificationTemplate.objects.all()\r\n\r\n ctx = {\r\n \"\": section_slug,\r\n \"\": status,\r\n \"\": proposals,\r\n \"\": notification_templates,\r\n }\r\n return render(request_result_notification, \"\", ctx)\r\n\r\n\r\n@login_required\r\ndef result_notification_prepare(request_result_notification_prepare, section_slug, status):\r\n if request_result_notification_prepare.method != \"\":\r\n return HttpResponseNotAllowed([\"\"])\r\n\r\n if not request_result_notification_prepare.user.has_perm(\"\" % section_slug):\r\n return render(request_result_notification_prepare, \"\", \"\")\r\n\r\n proposal_pks = []\r\n try:\r\n for pk in request_result_notification_prepare.POST.getlist(\"\"):\r\n proposal_pks.append(int(pk))\r\n except ValueError:\r\n return HttpResponseBadRequest()\r\n proposals = ProposalBase.objects.filter(\r\n kind__section__slug=section_slug,\r\n result__status=status,\r\n )\r\n proposals = proposals.filter(pk__in=proposal_pks)\r\n proposals = proposals.select_related(\"\", \"\")\r\n proposals = proposals.select_subclasses()\r\n\r\n notification_template_pk = request_result_notification_prepare.POST.get(\"\", \"\")\r\n if notification_template_pk:\r\n notification_template = NotificationTemplate.objects.get(pk=notification_template_pk)\r\n else:\r\n notification_template = None\r\n\r\n ctx = {\r\n \"\": section_slug,\r\n \"\": status,\r\n \"\": notification_template,\r\n \"\": proposals,\r\n \"\": \"\".join([str(pk) for pk in proposal_pks]),\r\n }\r\n return render(request_result_notification_prepare, \"\", ctx)\r\n\r\ndef accept_staff_suggestion(staffId):\r\n return \r\n\r\n@login_required\r\ndef result_notification_send(request_result_notification_send, section_slug, status):\r\n if request_result_notification_send.method != \"\":\r\n return HttpResponseNotAllowed([\"\"])\r\n\r\n if not request_result_notification_send.user.has_perm(\"\" % section_slug):\r\n return render(request_result_notification_send, \"\", \"\")\r\n\r\n if not all([k in request_result_notification_send.POST for k in [\"\", \"\", \"\", \"\"]]):\r\n return HttpResponseBadRequest()\r\n\r\n try:\r\n proposal_pks = [int(pk) for pk in request_result_notification_send.POST[\"\"].split(\"\")]\r\n except ValueError:\r\n return HttpResponseBadRequest()\r\n\r\n proposals = ProposalBase.objects.filter(\r\n kind__section__slug=section_slug,\r\n result__status=status,\r\n )\r\n proposals = proposals.filter(pk__in=proposal_pks)\r\n proposals = proposals.select_related(\"\", \"\")\r\n proposals = proposals.select_subclasses()\r\n\r\n notification_template_pk = request_result_notification_send.POST.get(\"\", \"\")\r\n if notification_template_pk:\r\n notification_template = NotificationTemplate.objects.get(pk=notification_template_pk)\r\n else:\r\n notification_template = None\r\n\r\n emails = []\r\n\r\n for proposal in proposals:\r\n rn = ResultNotification()\r\n rn.proposal = proposal\r\n rn.template = notification_template\r\n rn.to_address = proposal.speaker_email\r\n rn.from_address = request_result_notification_send.POST[\"\"]\r\n rn.subject = request_result_notification_send.POST[\"\"]\r\n rn.body = Template(request_result_notification_send.POST[\"\"]).render(\r\n Context({\r\n \"\": proposal.notification_email_context()\r\n })\r\n )\r\n rn.save()\r\n emails.append(rn.email_args)\r\n\r\n send_mass_mail(emails)\r\n\r\n return redirect(\"\", section_slug=section_slug, status=status)\r\n\r\n\r\n\r\n@login_required\r\ndef review_staff_comment(request_review_staff_comment, section_slug):\r\n if not request_review_staff_comment.user.has_perm(\"\" % section_slug):\r\n return render(request_review_staff_comment,\"\", \"\")\r\n if request_review_staff_comment.method == \"\":\r\n form = StaffCommentForm(request_review_staff_comment.POST)\r\n # TODO: complete implementation of staff comment form - split and mark accepted \r\n if ": [
    [
      -0.00044333635478961366,
      [
        "(",
        "request",
        "_",
        "review",
        "_",
        "staff",
        "_",
        "comment",
        ".",
        "is",
        "_",
        "valid",
        "()",
        " and",
        " ",
        "request",
        "_",
        "review",
        "_",
        "staff",
        "_",
        "comment",
        "."
      ]
    ],
    [
      -0.0005352576967459485,
      [
        " hasattr",
        "(",
        "request",
        "_",
        "review",
        "_",
        "staff",
        "_",
        "comment",
        ",",
        "<STR_LIT>",
        ")",
        " else",
        " ",
        "Staff",
        "Comment",
        "Form",
        "(",
        "request",
        "_",
        "review",
        "_",
        "staff",
        "_"
      ]
    ],
    [
      -0.0007309012433741779,
      [
        " hasattr",
        "(",
        "request",
        "_",
        "review",
        "_",
        "staff",
        "_",
        "comment",
        ",",
        "<STR_LIT>",
        ")",
        " else",
        " ",
        "Staff",
        "Comment",
        "Form",
        "(",
        "request",
        "_",
        "review",
        "_",
        "staff"
      ]
    ],
    [
      -0.000775681805122141,
      [
        " not",
        " ",
        "request",
        "_",
        "review",
        "_",
        "staff",
        "_",
        "comment",
        ".",
        "is",
        "_",
        "valid",
        "()",
        " else",
        " ",
        "Staff",
        "Comment",
        "Form",
        "(",
        "request",
        "_",
        "review",
        "_"
      ]
    ],
    [
      -0.0017732647594518234,
      [
        "<STR_LIT>",
        " in",
        " ",
        "request",
        "_",
        "review",
        "_",
        "staff",
        "_",
        "comment",
        ".",
        "form",
        ".",
        "fields",
        " else",
        " ",
        "Staff",
        "Comment",
        "Form",
        "(",
        "request",
        "_",
        "review"
      ]
    ],
    [
      -0.0022595307412491866,
      [
        " is",
        "_",
        "valid",
        "()",
        " else",
        " ",
        "Staff",
        "Comment",
        "Form",
        "(",
        "request",
        "_",
        "review",
        "_",
        "staff",
        "_",
        "comment",
        ".",
        "POST",
        ")",
        " if",
        " is",
        "_",
        "valid"
      ]
    ],
    [
      -0.0036786577283582996,
      [
        " hasattr",
        "(",
        "request",
        "_",
        "review",
        "_",
        "staff",
        "_",
        "comment",
        ",",
        "<STR_LIT>",
        ")",
        " else",
        " ",
        "Staff",
        "Comment",
        "Form",
        "()",
        "<endofline>"
      ]
    ],
    [
      -0.0038571012405764606,
      [
        " hasattr",
        "(",
        "request",
        "_",
        "review",
        "_",
        "staff",
        "_",
        "comment",
        ",",
        "<STR_LIT>",
        ")",
        " else",
        " ",
        "Staff",
        "Comment",
        "Form",
        "()",
        "<endofline>"
      ]
    ],
    [
      -0.004427248886400806,
      [
        " callable",
        "(",
        "form",
        ")",
        " else",
        " form",
        "()",
        "<endofline>"
      ]
    ],
    [
      -0.004697654039262755,
      [
        " not",
        " form",
        ".",
        "is",
        "_",
        "valid",
        "()",
        " else",
        " form",
        ".",
        "cleaned",
        "_",
        "data",
        "<endofline>"
      ]
    ],
    [
      -0.004829388156619929,
      [
        " not",
        " form",
        ".",
        "is",
        "_",
        "valid",
        "()",
        " else",
        " form",
        ".",
        "save",
        "()",
        "<unk>",
        "<endofline>"
      ]
    ],
    [
      -0.00494141284118484,
      [
        " form",
        ".",
        "is",
        "_",
        "valid",
        "()",
        ":"
      ]
    ],
    [
      -0.005241108358212781,
      [
        " hasattr",
        "(",
        "request",
        "_",
        "review",
        "_",
        "staff",
        "_",
        "comment",
        ",",
        "<STR_LIT>",
        ")",
        " else",
        " ",
        "request",
        "_",
        "review",
        "_",
        "staff",
        "_",
        "comment",
        ".",
        "form",
        "<endofline>"
      ]
    ],
    [
      -0.005711020005257624,
      [
        " hasattr",
        "(",
        "request",
        "_",
        "review",
        "_",
        "staff",
        "_",
        "comment",
        ",",
        "<STR_LIT>",
        ")",
        " else",
        " ",
        "request",
        "_",
        "review",
        "_",
        "staff",
        "_",
        "comment",
        "<endofline>"
      ]
    ],
    [
      -0.006281126984750334,
      [
        " hasattr",
        "(",
        "request",
        "_",
        "review",
        "_",
        "staff",
        "_",
        "comment",
        ",",
        "<STR_LIT>",
        ")",
        " else",
        " ",
        "request",
        "_",
        "review",
        "_",
        "staff",
        "_",
        "comment",
        ".",
        "POST",
        "<endofline>"
      ]
    ]
  ],
  "from django.core.mail import send_mass_mail\r\nfrom django.db.models import Q\r\nfrom django.http import HttpResponseBadRequest, HttpResponseNotAllowed\r\nfrom django.shortcuts import render, redirect, get_object_or_404\r\nfrom django.template import Context, Template\r\nfrom django.views.decorators.http import require_POST\r\n\r\nfrom account.decorators import login_required\r\n\r\n# @@@ switch to pinax-teams\r\nfrom symposion.teams.models import Team\r\n\r\nfrom symposion.conf import settings\r\nfrom symposion.proposals.models import ProposalBase, ProposalSection\r\nfrom symposion.utils.mail import send_email\r\n\r\nfrom symposion.reviews.forms import ReviewForm, SpeakerCommentForm\r\nfrom symposion.reviews.forms import BulkPresentationForm\r\nfrom symposion.reviews.forms import StaffCommentForm\r\nfrom symposion.reviews.models import (\r\n ReviewAssignment, Review, LatestVote, ProposalResult, NotificationTemplate,\r\n ResultNotification\r\n)\r\n\r\n\r\ndef proposals_generator(request, queryset, user_pk=None, check_speaker=True):\r\n\r\n for obj in queryset:\r\n # @@@ this sucks; we can do better\r\n if check_speaker:\r\n if request.user in [s.user for s in obj.speakers()]:\r\n continue\r\n\r\n try:\r\n obj.result\r\n except ProposalResult.DoesNotExist:\r\n ProposalResult.objects.get_or_create(proposal=obj)\r\n\r\n obj.comment_count = obj.result.comment_count\r\n obj.total_votes = obj.result.vote_count\r\n obj.plus_one = obj.result.plus_one\r\n obj.plus_zero = obj.result.plus_zero\r\n obj.minus_zero = obj.result.minus_zero\r\n obj.minus_one = obj.result.minus_one\r\n lookup_params = dict(proposal=obj)\r\n\r\n if user_pk:\r\n lookup_params[\"\"] = user_pk\r\n else:\r\n lookup_params[\"\"] = request.user\r\n\r\n try:\r\n obj.user_vote = LatestVote.objects.get(**lookup_params).vote\r\n obj.user_vote_css = LatestVote.objects.get(**lookup_params).css_class()\r\n except LatestVote.DoesNotExist:\r\n obj.user_vote = None\r\n obj.user_vote_css = \"\"\r\n\r\n yield obj\r\n\r\ndef access_not_permitted(request,error_message):\r\n return render(request, \"\", error_message)\r\n\r\n\r\n# Returns a list of all proposals, proposals reviewed by the user, or the proposals the user has\r\n# yet to review depending on the link user clicks in dashboard\r\n@login_required\r\ndef review_section(request_review, section_slug, assigned=False, reviewed=\"\"):\r\n\r\n if not request_review.user.has_perm(\"\" % section_slug):\r\n return render(request_review, \"\",\"\")\r\n\r\n section = get_object_or_404(ProposalSection, section__slug=section_slug)\r\n queryset = ProposalBase.objects.filter(kind__section=section.section)\r\n\r\n if assigned:\r\n assignments = ReviewAssignment.objects.filter(user=request_review.user)\\\r\n .values_list(\"\")\r\n queryset = queryset.filter(id__in=assignments)\r\n\r\n # passing reviewed in from reviews.urls and out to review_list for\r\n # appropriate template header rendering\r\n if reviewed == \"\":\r\n queryset = queryset.select_related(\"\").select_subclasses()\r\n reviewed = \"\"\r\n elif reviewed == \"\":\r\n queryset = queryset.filter(reviews__user=request_review.user)\r\n reviewed = \"\"\r\n else:\r\n queryset = queryset.exclude(reviews__user=request_review.user).exclude(\r\n speaker__user=request_review.user)\r\n reviewed = \"\"\r\n\r\n proposals = proposals_generator(request_review, queryset)\r\n\r\n ctx = {\r\n \"\": proposals,\r\n \"\": section,\r\n \"\": reviewed,\r\n }\r\n\r\n return render(request_review, \"\", ctx)\r\n\r\n\r\n@login_required\r\ndef review_list(request_review_list, section_slug, user_pk):\r\n\r\n # if they''t the person whose\r\n # review list is being asked for, don't let them in\r\n if not request_review_list.user.has_perm(\"\" % section_slug):\r\n if not request_review_list.user.pk == user_pk:\r\n return render(request_review_list, \"\", \"\")\r\n\r\n queryset = ProposalBase.objects.select_related(\"\", \"\")\r\n reviewed = LatestVote.objects.filter(user__pk=user_pk).values_list(\"\", flat=True)\r\n queryset = queryset.filter(pk__in=reviewed)\r\n proposals = queryset.order_by(\"\")\r\n\r\n admin = request_review_list.user.has_perm(\"\" % section_slug)\r\n\r\n proposals = proposals_generator(request_review_list, proposals, user_pk=user_pk, check_speaker=not admin)\r\n\r\n ctx = {\r\n \"\": proposals,\r\n }\r\n return render(request_review_list, \"\", ctx)\r\n\r\n\r\n@login_required\r\ndef review_admin(request_review_admin, section_slug):\r\n\r\n if not request_review_admin.user.has_perm(\"\" % section_slug):\r\n return render(request_review_admin, \"\", \"\")\r\n\r\n def reviewers():\r\n already_seen = set()\r\n\r\n for team in Team.objects.filter(permissions__codename=\"\" % section_slug):\r\n for membership in team.memberships.filter(Q(state=\"\") | Q(state=\"\")):\r\n user = membership.user\r\n if user.pk in already_seen:\r\n continue\r\n already_seen.add(user.pk)\r\n\r\n user.comment_count = Review.objects.filter(user=user).count()\r\n user.total_votes = LatestVote.objects.filter(user=user).count()\r\n user.plus_one = LatestVote.objects.filter(\r\n user=user,\r\n vote=LatestVote.VOTES.PLUS_ONE\r\n ).count()\r\n user.plus_zero = LatestVote.objects.filter(\r\n user=user,\r\n vote=LatestVote.VOTES.PLUS_ZERO\r\n ).count()\r\n user.minus_zero = LatestVote.objects.filter(\r\n user=user,\r\n vote=LatestVote.VOTES.MINUS_ZERO\r\n ).count()\r\n user.minus_one = LatestVote.objects.filter(\r\n user=user,\r\n vote=LatestVote.VOTES.MINUS_ONE\r\n ).count()\r\n\r\n yield user\r\n\r\n ctx = {\r\n \"\": section_slug,\r\n \"\": reviewers(),\r\n }\r\n return render(request_review_admin, \"\", ctx)\r\n\r\n@login_required\r\ndef review_detail(request_review_detail, pk):\r\n\r\n proposals = ProposalBase.objects.select_related(\"\").select_subclasses()\r\n proposal = get_object_or_404(proposals, pk=pk)\r\n\r\n if not request_review_detail.user.has_perm(\"\" % proposal.kind.section.slug):\r\n return render(request_review_detail, \"\", \"\")\r\n\r\n speakers = [s.user for s in proposal.speakers()]\r\n\r\n if not request_review_detail.user.is_superuser and request_review_detail.user in speakers:\r\n return render(request_review_detail, \"\", \"\")\r\n\r\n admin = request_review_detail.user.is_staff\r\n\r\n try:\r\n latest_vote = LatestVote.objects.get(proposal=proposal, user=request_review_detail.user)\r\n except LatestVote.DoesNotExist:\r\n latest_vote = None\r\n\r\n if request_review_detail.method == \"\":\r\n if request_review_detail.user in speakers:\r\n return render(request_review_detail, \"\", \"\")\r\n\r\n if \"\" in request_review_detail.POST:\r\n review_form = ReviewForm(request_review_detail.POST)\r\n if review_form.is_valid():\r\n\r\n review = review_form.save(commit=False)\r\n review.user = request_review_detail.user\r\n review.proposal = proposal\r\n review.save()\r\n\r\n return redirect(request_review_detail.path)\r\n else:\r\n message_form = SpeakerCommentForm()\r\n elif \"\" in request_review_detail.POST:\r\n message_form = SpeakerCommentForm(request_review_detail.POST)\r\n if message_form.is_valid():\r\n\r\n message = message_form.save(commit=False)\r\n message.user = request_review_detail.user\r\n message.proposal = proposal\r\n message.save()\r\n\r\n for speaker in speakers:\r\n if speaker and speaker.email:\r\n ctx = {\r\n \"\": proposal,\r\n \"\": message,\r\n \"\": False,\r\n }\r\n send_email(\r\n [speaker.email], \"\",\r\n context=ctx\r\n )\r\n\r\n return redirect(request_review_detail.path)\r\n else:\r\n initial = {}\r\n if latest_vote:\r\n initial[\"\"] = latest_vote.vote\r\n if request_review_detail.user in speakers:\r\n review_form = None\r\n else:\r\n review_form = ReviewForm(initial=initial)\r\n elif \"\" in request_review_detail.POST:\r\n if admin:\r\n result = request_review_detail.POST[\"\"]\r\n\r\n if result == \"\":\r\n proposal.result.status = \"\"\r\n proposal.result.save()\r\n elif result == \"\":\r\n proposal.result.status = \"\"\r\n proposal.result.save()\r\n elif result == \"\":\r\n proposal.result.status = \"\"\r\n proposal.result.save()\r\n elif result == \"\":\r\n proposal.result.status = \"\"\r\n proposal.result.save()\r\n\r\n return redirect(request_review_detail.path)\r\n else:\r\n initial = {}\r\n if latest_vote:\r\n initial[\"\"] = latest_vote.vote\r\n if request_review_detail.user in speakers:\r\n review_form = None\r\n else:\r\n review_form = ReviewForm(initial=initial)\r\n message_form = SpeakerCommentForm()\r\n\r\n proposal.comment_count = proposal.result.comment_count\r\n proposal.total_votes = proposal.result.vote_count\r\n proposal.plus_one = proposal.result.plus_one\r\n proposal.plus_zero = proposal.result.plus_zero\r\n proposal.minus_zero = proposal.result.minus_zero\r\n proposal.minus_one = proposal.result.minus_one\r\n\r\n reviews = Review.objects.filter(proposal=proposal).order_by(\"\")\r\n messages = proposal.messages.order_by(\"\")\r\n\r\n return render(request_review_detail, \"\", {\r\n \"\": proposal,\r\n \"\": latest_vote,\r\n \"\": reviews,\r\n \"\": messages,\r\n \"\": review_form,\r\n \"\": message_form\r\n })\r\n\r\n\r\n@login_required\r\n@require_POST\r\ndef review_delete(request_delete, pk):\r\n review = get_object_or_404(Review, pk=pk)\r\n section_slug = review.section.slug\r\n\r\n if not request_delete.user.has_perm(\"\" % section_slug):\r\n return render(request_delete, \"\", \"\")\r\n\r\n review = get_object_or_404(Review, pk=pk)\r\n review.delete()\r\n\r\n return redirect(\"\", pk=review.proposal.pk)\r\n\r\n\r\n@login_required\r\ndef review_status(request_review_status, section_slug=None, key=None):\r\n\r\n if not request_review_status.user.has_perm(\"\" % section_slug):\r\n return render(request_review_status, \"\", \"\")\r\n\r\n VOTE_THRESHOLD = settings.SYMPOSION_VOTE_THRESHOLD\r\n\r\n ctx = {\r\n \"\": section_slug,\r\n \"\": VOTE_THRESHOLD,\r\n }\r\n\r\n queryset = ProposalBase.objects.select_related(\"\", \"\").select_subclasses()\r\n if section_slug:\r\n queryset = queryset.filter(kind__section__slug=section_slug)\r\n\r\n proposals = {\r\n # proposals with at least VOTE_THRESHOLD reviews and at least one +1 and no -1s, sorted by\r\n # the ''\r\n \"\": queryset.filter(result__vote_count__gte=VOTE_THRESHOLD, result__plus_one__gt=0,\r\n result__minus_one=0).order_by(\"\"),\r\n # proposals with at least VOTE_THRESHOLD reviews and at least one -1 and no +1s, reverse\r\n # sorted by the ''\r\n \"\": queryset.filter(result__vote_count__gte=VOTE_THRESHOLD, result__minus_one__gt=0,\r\n result__plus_one=0).order_by(\"\"),\r\n # proposals with at least VOTE_THRESHOLD reviews and neither a +1 or a -1, sorted by total\r\n # votes (lowest first)\r\n \"\": queryset.filter(result__vote_count__gte=VOTE_THRESHOLD, result__minus_one=0,\r\n result__plus_one=0).order_by(\"\"),\r\n # proposals with at least VOTE_THRESHOLD reviews and both a +1 and -1, sorted by total\r\n # votes (highest first)\r\n \"\": queryset.filter(result__vote_count__gte=VOTE_THRESHOLD,\r\n result__plus_one__gt=0, result__minus_one__gt=0)\r\n .order_by(\"\"),\r\n # proposals with fewer than VOTE_THRESHOLD reviews\r\n \"\": queryset.filter(result__vote_count__lt=VOTE_THRESHOLD)\r\n .order_by(\"\"),\r\n }\r\n\r\n admin = request_review_status.user.has_perm(\"\" % section_slug)\r\n\r\n for status in proposals:\r\n if key and key != status:\r\n continue\r\n proposals[status] = list(proposals_generator(request_review_status, proposals[status], check_speaker=not admin))\r\n\r\n if key:\r\n ctx.update({\r\n \"\": key,\r\n \"\": proposals[key],\r\n })\r\n else:\r\n ctx[\"\"] = proposals\r\n\r\n return render(request_review_status, \"\", ctx)\r\n\r\n\r\n@login_required\r\ndef review_assignments(request_review_assignments):\r\n if not request_review_assignments.user.groups.filter(name=\"\").exists():\r\n return render(request_review_assignments, \"\", \"\")\r\n assignments = ReviewAssignment.objects.filter(\r\n user=request_review_assignments.user,\r\n opted_out=False\r\n )\r\n return render(request_review_assignments, \"\", {\r\n \"\": assignments,\r\n })\r\n\r\n\r\n@login_required\r\n@require_POST\r\ndef review_assignment_opt_out(request_review_assignment_opt_out, pk):\r\n review_assignment = get_object_or_404(\r\n ReviewAssignment, pk=pk, user=request_review_assignment_opt_out.user)\r\n if not review_assignment.opted_out:\r\n review_assignment.opted_out = True\r\n review_assignment.save()\r\n ReviewAssignment.create_assignments(\r\n review_assignment.proposal, origin=ReviewAssignment.AUTO_ASSIGNED_LATER)\r\n return redirect(\"\")\r\n\r\n\r\n@login_required\r\ndef review_bulk_accept(request_review_bulk_accept, section_slug):\r\n if not request_review_bulk_accept.user.has_perm(\"\" % section_slug):\r\n return render(request_review_bulk_accept, \"\", \"\")\r\n if request_review_bulk_accept.method == \"\":\r\n form = BulkPresentationForm(request_review_bulk_accept.POST)\r\n if form.is_valid():\r\n talk_ids = form.cleaned_data[\"\"].split(\"\")\r\n talks = ProposalBase.objects.filter(id__in=talk_ids).select_related(\"\")\r\n for talk in talks:\r\n talk.result.status = \"\"\r\n talk.result.save()\r\n return redirect(\"\", section_slug=section_slug)\r\n else:\r\n form = BulkPresentationForm()\r\n\r\n return render(request_review_bulk_accept, \"\", {\r\n \"\": form,\r\n })\r\n\r\n\r\n@login_required\r\ndef result_notification(request_result_notification, section_slug, status):\r\n if not request_result_notification.user.has_perm(\"\" % section_slug):\r\n return render(request_result_notification, \"\", \"\")\r\n\r\n proposals = ProposalBase.objects.filter(kind__section__slug=section_slug, result__status=status).select_related(\"\", \"\").select_subclasses()\r\n notification_templates = NotificationTemplate.objects.all()\r\n\r\n ctx = {\r\n \"\": section_slug,\r\n \"\": status,\r\n \"\": proposals,\r\n \"\": notification_templates,\r\n }\r\n return render(request_result_notification, \"\", ctx)\r\n\r\n\r\n@login_required\r\ndef result_notification_prepare(request_result_notification_prepare, section_slug, status):\r\n if request_result_notification_prepare.method != \"\":\r\n return HttpResponseNotAllowed([\"\"])\r\n\r\n if not request_result_notification_prepare.user.has_perm(\"\" % section_slug):\r\n return render(request_result_notification_prepare, \"\", \"\")\r\n\r\n proposal_pks = []\r\n try:\r\n for pk in request_result_notification_prepare.POST.getlist(\"\"):\r\n proposal_pks.append(int(pk))\r\n except ValueError:\r\n return HttpResponseBadRequest()\r\n proposals = ProposalBase.objects.filter(\r\n kind__section__slug=section_slug,\r\n result__status=status,\r\n )\r\n proposals = proposals.filter(pk__in=proposal_pks)\r\n proposals = proposals.select_related(\"\", \"\")\r\n proposals = proposals.select_subclasses()\r\n\r\n notification_template_pk = request_result_notification_prepare.POST.get(\"\", \"\")\r\n if notification_template_pk:\r\n notification_template = NotificationTemplate.objects.get(pk=notification_template_pk)\r\n else:\r\n notification_template = None\r\n\r\n ctx = {\r\n \"\": section_slug,\r\n \"\": status,\r\n \"\": notification_template,\r\n \"\": proposals,\r\n \"\": \"\".join([str(pk) for pk in proposal_pks]),\r\n }\r\n return render(request_result_notification_prepare, \"\", ctx)\r\n\r\ndef accept_staff_suggestion(staffId):\r\n return \r\n\r\n@login_required\r\ndef result_notification_send(request_result_notification_send, section_slug, status):\r\n if request_result_notification_send.method != \"\":\r\n return HttpResponseNotAllowed([\"\"])\r\n\r\n if not request_result_notification_send.user.has_perm(\"\" % section_slug):\r\n return render(request_result_notification_send, \"\", \"\")\r\n\r\n if not all([k in request_result_notification_send.POST for k in [\"\", \"\", \"\", \"\"]]):\r\n return HttpResponseBadRequest()\r\n\r\n try:\r\n proposal_pks = [int(pk) for pk in request_result_notification_send.POST[\"\"].split(\"\")]\r\n except ValueError:\r\n return HttpResponseBadRequest()\r\n\r\n proposals = ProposalBase.objects.filter(\r\n kind__section__slug=section_slug,\r\n result__status=status,\r\n )\r\n proposals = proposals.filter(pk__in=proposal_pks)\r\n proposals = proposals.select_related(\"\", \"\")\r\n proposals = proposals.select_subclasses()\r\n\r\n notification_template_pk = request_result_notification_send.POST.get(\"\", \"\")\r\n if notification_template_pk:\r\n notification_template = NotificationTemplate.objects.get(pk=notification_template_pk)\r\n else:\r\n notification_template = None\r\n\r\n emails = []\r\n\r\n for proposal in proposals:\r\n rn = ResultNotification()\r\n rn.proposal = proposal\r\n rn.template = notification_template\r\n rn.to_address = proposal.speaker_email\r\n rn.from_address = request_result_notification_send.POST[\"\"]\r\n rn.subject = request_result_notification_send.POST[\"\"]\r\n rn.body = Template(request_result_notification_send.POST[\"\"]).render(\r\n Context({\r\n \"\": proposal.notification_email_context()\r\n })\r\n )\r\n rn.save()\r\n emails.append(rn.email_args)\r\n\r\n send_mass_mail(emails)\r\n\r\n return redirect(\"\", section_slug=section_slug, status=status)\r\n\r\n\r\n\r\n@login_required\r\ndef review_staff_comment(request_review_staff_comment, section_slug):\r\n if not request_review_staff_comment.user.has_perm(\"\" % section_slug):\r\n return render(request_review_staff_comment,\"\", \"\")\r\n if request_review_staff_comment.method == \"\":\r\n form = StaffCommentForm(request_review_staff_comment.POST)\r\n # TODO: complete implementation of staff comment form - split and mark accepted \r\n if form.is_valid():": [
    [
      -0.000811408996739537,
      [
        ""
      ]
    ]
  ],
  "from django.core.mail import send_mass_mail\r\nfrom django.db.models import Q\r\nfrom django.http import HttpResponseBadRequest, HttpResponseNotAllowed\r\nfrom django.shortcuts import render, redirect, get_object_or_404\r\nfrom django.template import Context, Template\r\nfrom django.views.decorators.http import require_POST\r\n\r\nfrom account.decorators import login_required\r\n\r\n# @@@ switch to pinax-teams\r\nfrom symposion.teams.models import Team\r\n\r\nfrom symposion.conf import settings\r\nfrom symposion.proposals.models import ProposalBase, ProposalSection\r\nfrom symposion.utils.mail import send_email\r\n\r\nfrom symposion.reviews.forms import ReviewForm, SpeakerCommentForm\r\nfrom symposion.reviews.forms import BulkPresentationForm\r\nfrom symposion.reviews.forms import StaffCommentForm\r\nfrom symposion.reviews.models import (\r\n ReviewAssignment, Review, LatestVote, ProposalResult, NotificationTemplate,\r\n ResultNotification\r\n)\r\n\r\n\r\ndef proposals_generator(request, queryset, user_pk=None, check_speaker=True):\r\n\r\n for obj in queryset:\r\n # @@@ this sucks; we can do better\r\n if check_speaker:\r\n if request.user in [s.user for s in obj.speakers()]:\r\n continue\r\n\r\n try:\r\n obj.result\r\n except ProposalResult.DoesNotExist:\r\n ProposalResult.objects.get_or_create(proposal=obj)\r\n\r\n obj.comment_count = obj.result.comment_count\r\n obj.total_votes = obj.result.vote_count\r\n obj.plus_one = obj.result.plus_one\r\n obj.plus_zero = obj.result.plus_zero\r\n obj.minus_zero = obj.result.minus_zero\r\n obj.minus_one = obj.result.minus_one\r\n lookup_params = dict(proposal=obj)\r\n\r\n if user_pk:\r\n lookup_params[\"\"] = user_pk\r\n else:\r\n lookup_params[\"\"] = request.user\r\n\r\n try:\r\n obj.user_vote = LatestVote.objects.get(**lookup_params).vote\r\n obj.user_vote_css = LatestVote.objects.get(**lookup_params).css_class()\r\n except LatestVote.DoesNotExist:\r\n obj.user_vote = None\r\n obj.user_vote_css = \"\"\r\n\r\n yield obj\r\n\r\ndef access_not_permitted(request,error_message):\r\n return render(request, \"\", error_message)\r\n\r\n\r\n# Returns a list of all proposals, proposals reviewed by the user, or the proposals the user has\r\n# yet to review depending on the link user clicks in dashboard\r\n@login_required\r\ndef review_section(request_review, section_slug, assigned=False, reviewed=\"\"):\r\n\r\n if not request_review.user.has_perm(\"\" % section_slug):\r\n return render(request_review, \"\",\"\")\r\n\r\n section = get_object_or_404(ProposalSection, section__slug=section_slug)\r\n queryset = ProposalBase.objects.filter(kind__section=section.section)\r\n\r\n if assigned:\r\n assignments = ReviewAssignment.objects.filter(user=request_review.user)\\\r\n .values_list(\"\")\r\n queryset = queryset.filter(id__in=assignments)\r\n\r\n # passing reviewed in from reviews.urls and out to review_list for\r\n # appropriate template header rendering\r\n if reviewed == \"\":\r\n queryset = queryset.select_related(\"\").select_subclasses()\r\n reviewed = \"\"\r\n elif reviewed == \"\":\r\n queryset = queryset.filter(reviews__user=request_review.user)\r\n reviewed = \"\"\r\n else:\r\n queryset = queryset.exclude(reviews__user=request_review.user).exclude(\r\n speaker__user=request_review.user)\r\n reviewed = \"\"\r\n\r\n proposals = proposals_generator(request_review, queryset)\r\n\r\n ctx = {\r\n \"\": proposals,\r\n \"\": section,\r\n \"\": reviewed,\r\n }\r\n\r\n return render(request_review, \"\", ctx)\r\n\r\n\r\n@login_required\r\ndef review_list(request_review_list, section_slug, user_pk):\r\n\r\n # if they''t the person whose\r\n # review list is being asked for, don't let them in\r\n if not request_review_list.user.has_perm(\"\" % section_slug):\r\n if not request_review_list.user.pk == user_pk:\r\n return render(request_review_list, \"\", \"\")\r\n\r\n queryset = ProposalBase.objects.select_related(\"\", \"\")\r\n reviewed = LatestVote.objects.filter(user__pk=user_pk).values_list(\"\", flat=True)\r\n queryset = queryset.filter(pk__in=reviewed)\r\n proposals = queryset.order_by(\"\")\r\n\r\n admin = request_review_list.user.has_perm(\"\" % section_slug)\r\n\r\n proposals = proposals_generator(request_review_list, proposals, user_pk=user_pk, check_speaker=not admin)\r\n\r\n ctx = {\r\n \"\": proposals,\r\n }\r\n return render(request_review_list, \"\", ctx)\r\n\r\n\r\n@login_required\r\ndef review_admin(request_review_admin, section_slug):\r\n\r\n if not request_review_admin.user.has_perm(\"\" % section_slug):\r\n return render(request_review_admin, \"\", \"\")\r\n\r\n def reviewers():\r\n already_seen = set()\r\n\r\n for team in Team.objects.filter(permissions__codename=\"\" % section_slug):\r\n for membership in team.memberships.filter(Q(state=\"\") | Q(state=\"\")):\r\n user = membership.user\r\n if user.pk in already_seen:\r\n continue\r\n already_seen.add(user.pk)\r\n\r\n user.comment_count = Review.objects.filter(user=user).count()\r\n user.total_votes = LatestVote.objects.filter(user=user).count()\r\n user.plus_one = LatestVote.objects.filter(\r\n user=user,\r\n vote=LatestVote.VOTES.PLUS_ONE\r\n ).count()\r\n user.plus_zero = LatestVote.objects.filter(\r\n user=user,\r\n vote=LatestVote.VOTES.PLUS_ZERO\r\n ).count()\r\n user.minus_zero = LatestVote.objects.filter(\r\n user=user,\r\n vote=LatestVote.VOTES.MINUS_ZERO\r\n ).count()\r\n user.minus_one = LatestVote.objects.filter(\r\n user=user,\r\n vote=LatestVote.VOTES.MINUS_ONE\r\n ).count()\r\n\r\n yield user\r\n\r\n ctx = {\r\n \"\": section_slug,\r\n \"\": reviewers(),\r\n }\r\n return render(request_review_admin, \"\", ctx)\r\n\r\n@login_required\r\ndef review_detail(request_review_detail, pk):\r\n\r\n proposals = ProposalBase.objects.select_related(\"\").select_subclasses()\r\n proposal = get_object_or_404(proposals, pk=pk)\r\n\r\n if not request_review_detail.user.has_perm(\"\" % proposal.kind.section.slug):\r\n return render(request_review_detail, \"\", \"\")\r\n\r\n speakers = [s.user for s in proposal.speakers()]\r\n\r\n if not request_review_detail.user.is_superuser and request_review_detail.user in speakers:\r\n return render(request_review_detail, \"\", \"\")\r\n\r\n admin = request_review_detail.user.is_staff\r\n\r\n try:\r\n latest_vote = LatestVote.objects.get(proposal=proposal, user=request_review_detail.user)\r\n except LatestVote.DoesNotExist:\r\n latest_vote = None\r\n\r\n if request_review_detail.method == \"\":\r\n if request_review_detail.user in speakers:\r\n return render(request_review_detail, \"\", \"\")\r\n\r\n if \"\" in request_review_detail.POST:\r\n review_form = ReviewForm(request_review_detail.POST)\r\n if review_form.is_valid():\r\n\r\n review = review_form.save(commit=False)\r\n review.user = request_review_detail.user\r\n review.proposal = proposal\r\n review.save()\r\n\r\n return redirect(request_review_detail.path)\r\n else:\r\n message_form = SpeakerCommentForm()\r\n elif \"\" in request_review_detail.POST:\r\n message_form = SpeakerCommentForm(request_review_detail.POST)\r\n if message_form.is_valid():\r\n\r\n message = message_form.save(commit=False)\r\n message.user = request_review_detail.user\r\n message.proposal = proposal\r\n message.save()\r\n\r\n for speaker in speakers:\r\n if speaker and speaker.email:\r\n ctx = {\r\n \"\": proposal,\r\n \"\": message,\r\n \"\": False,\r\n }\r\n send_email(\r\n [speaker.email], \"\",\r\n context=ctx\r\n )\r\n\r\n return redirect(request_review_detail.path)\r\n else:\r\n initial = {}\r\n if latest_vote:\r\n initial[\"\"] = latest_vote.vote\r\n if request_review_detail.user in speakers:\r\n review_form = None\r\n else:\r\n review_form = ReviewForm(initial=initial)\r\n elif \"\" in request_review_detail.POST:\r\n if admin:\r\n result = request_review_detail.POST[\"\"]\r\n\r\n if result == \"\":\r\n proposal.result.status = \"\"\r\n proposal.result.save()\r\n elif result == \"\":\r\n proposal.result.status = \"\"\r\n proposal.result.save()\r\n elif result == \"\":\r\n proposal.result.status = \"\"\r\n proposal.result.save()\r\n elif result == \"\":\r\n proposal.result.status = \"\"\r\n proposal.result.save()\r\n\r\n return redirect(request_review_detail.path)\r\n else:\r\n initial = {}\r\n if latest_vote:\r\n initial[\"\"] = latest_vote.vote\r\n if request_review_detail.user in speakers:\r\n review_form = None\r\n else:\r\n review_form = ReviewForm(initial=initial)\r\n message_form = SpeakerCommentForm()\r\n\r\n proposal.comment_count = proposal.result.comment_count\r\n proposal.total_votes = proposal.result.vote_count\r\n proposal.plus_one = proposal.result.plus_one\r\n proposal.plus_zero = proposal.result.plus_zero\r\n proposal.minus_zero = proposal.result.minus_zero\r\n proposal.minus_one = proposal.result.minus_one\r\n\r\n reviews = Review.objects.filter(proposal=proposal).order_by(\"\")\r\n messages = proposal.messages.order_by(\"\")\r\n\r\n return render(request_review_detail, \"\", {\r\n \"\": proposal,\r\n \"\": latest_vote,\r\n \"\": reviews,\r\n \"\": messages,\r\n \"\": review_form,\r\n \"\": message_form\r\n })\r\n\r\n\r\n@login_required\r\n@require_POST\r\ndef review_delete(request_delete, pk):\r\n review = get_object_or_404(Review, pk=pk)\r\n section_slug = review.section.slug\r\n\r\n if not request_delete.user.has_perm(\"\" % section_slug):\r\n return render(request_delete, \"\", \"\")\r\n\r\n review = get_object_or_404(Review, pk=pk)\r\n review.delete()\r\n\r\n return redirect(\"\", pk=review.proposal.pk)\r\n\r\n\r\n@login_required\r\ndef review_status(request_review_status, section_slug=None, key=None):\r\n\r\n if not request_review_status.user.has_perm(\"\" % section_slug):\r\n return render(request_review_status, \"\", \"\")\r\n\r\n VOTE_THRESHOLD = settings.SYMPOSION_VOTE_THRESHOLD\r\n\r\n ctx = {\r\n \"\": section_slug,\r\n \"\": VOTE_THRESHOLD,\r\n }\r\n\r\n queryset = ProposalBase.objects.select_related(\"\", \"\").select_subclasses()\r\n if section_slug:\r\n queryset = queryset.filter(kind__section__slug=section_slug)\r\n\r\n proposals = {\r\n # proposals with at least VOTE_THRESHOLD reviews and at least one +1 and no -1s, sorted by\r\n # the ''\r\n \"\": queryset.filter(result__vote_count__gte=VOTE_THRESHOLD, result__plus_one__gt=0,\r\n result__minus_one=0).order_by(\"\"),\r\n # proposals with at least VOTE_THRESHOLD reviews and at least one -1 and no +1s, reverse\r\n # sorted by the ''\r\n \"\": queryset.filter(result__vote_count__gte=VOTE_THRESHOLD, result__minus_one__gt=0,\r\n result__plus_one=0).order_by(\"\"),\r\n # proposals with at least VOTE_THRESHOLD reviews and neither a +1 or a -1, sorted by total\r\n # votes (lowest first)\r\n \"\": queryset.filter(result__vote_count__gte=VOTE_THRESHOLD, result__minus_one=0,\r\n result__plus_one=0).order_by(\"\"),\r\n # proposals with at least VOTE_THRESHOLD reviews and both a +1 and -1, sorted by total\r\n # votes (highest first)\r\n \"\": queryset.filter(result__vote_count__gte=VOTE_THRESHOLD,\r\n result__plus_one__gt=0, result__minus_one__gt=0)\r\n .order_by(\"\"),\r\n # proposals with fewer than VOTE_THRESHOLD reviews\r\n \"\": queryset.filter(result__vote_count__lt=VOTE_THRESHOLD)\r\n .order_by(\"\"),\r\n }\r\n\r\n admin = request_review_status.user.has_perm(\"\" % section_slug)\r\n\r\n for status in proposals:\r\n if key and key != status:\r\n continue\r\n proposals[status] = list(proposals_generator(request_review_status, proposals[status], check_speaker=not admin))\r\n\r\n if key:\r\n ctx.update({\r\n \"\": key,\r\n \"\": proposals[key],\r\n })\r\n else:\r\n ctx[\"\"] = proposals\r\n\r\n return render(request_review_status, \"\", ctx)\r\n\r\n\r\n@login_required\r\ndef review_assignments(request_review_assignments):\r\n if not request_review_assignments.user.groups.filter(name=\"\").exists():\r\n return render(request_review_assignments, \"\", \"\")\r\n assignments = ReviewAssignment.objects.filter(\r\n user=request_review_assignments.user,\r\n opted_out=False\r\n )\r\n return render(request_review_assignments, \"\", {\r\n \"\": assignments,\r\n })\r\n\r\n\r\n@login_required\r\n@require_POST\r\ndef review_assignment_opt_out(request_review_assignment_opt_out, pk):\r\n review_assignment = get_object_or_404(\r\n ReviewAssignment, pk=pk, user=request_review_assignment_opt_out.user)\r\n if not review_assignment.opted_out:\r\n review_assignment.opted_out = True\r\n review_assignment.save()\r\n ReviewAssignment.create_assignments(\r\n review_assignment.proposal, origin=ReviewAssignment.AUTO_ASSIGNED_LATER)\r\n return redirect(\"\")\r\n\r\n\r\n@login_required\r\ndef review_bulk_accept(request_review_bulk_accept, section_slug):\r\n if not request_review_bulk_accept.user.has_perm(\"\" % section_slug):\r\n return render(request_review_bulk_accept, \"\", \"\")\r\n if request_review_bulk_accept.method == \"\":\r\n form = BulkPresentationForm(request_review_bulk_accept.POST)\r\n if form.is_valid():\r\n talk_ids = form.cleaned_data[\"\"].split(\"\")\r\n talks = ProposalBase.objects.filter(id__in=talk_ids).select_related(\"\")\r\n for talk in talks:\r\n talk.result.status = \"\"\r\n talk.result.save()\r\n return redirect(\"\", section_slug=section_slug)\r\n else:\r\n form = BulkPresentationForm()\r\n\r\n return render(request_review_bulk_accept, \"\", {\r\n \"\": form,\r\n })\r\n\r\n\r\n@login_required\r\ndef result_notification(request_result_notification, section_slug, status):\r\n if not request_result_notification.user.has_perm(\"\" % section_slug):\r\n return render(request_result_notification, \"\", \"\")\r\n\r\n proposals = ProposalBase.objects.filter(kind__section__slug=section_slug, result__status=status).select_related(\"\", \"\").select_subclasses()\r\n notification_templates = NotificationTemplate.objects.all()\r\n\r\n ctx = {\r\n \"\": section_slug,\r\n \"\": status,\r\n \"\": proposals,\r\n \"\": notification_templates,\r\n }\r\n return render(request_result_notification, \"\", ctx)\r\n\r\n\r\n@login_required\r\ndef result_notification_prepare(request_result_notification_prepare, section_slug, status):\r\n if request_result_notification_prepare.method != \"\":\r\n return HttpResponseNotAllowed([\"\"])\r\n\r\n if not request_result_notification_prepare.user.has_perm(\"\" % section_slug):\r\n return render(request_result_notification_prepare, \"\", \"\")\r\n\r\n proposal_pks = []\r\n try:\r\n for pk in request_result_notification_prepare.POST.getlist(\"\"):\r\n proposal_pks.append(int(pk))\r\n except ValueError:\r\n return HttpResponseBadRequest()\r\n proposals = ProposalBase.objects.filter(\r\n kind__section__slug=section_slug,\r\n result__status=status,\r\n )\r\n proposals = proposals.filter(pk__in=proposal_pks)\r\n proposals = proposals.select_related(\"\", \"\")\r\n proposals = proposals.select_subclasses()\r\n\r\n notification_template_pk = request_result_notification_prepare.POST.get(\"\", \"\")\r\n if notification_template_pk:\r\n notification_template = NotificationTemplate.objects.get(pk=notification_template_pk)\r\n else:\r\n notification_template = None\r\n\r\n ctx = {\r\n \"\": section_slug,\r\n \"\": status,\r\n \"\": notification_template,\r\n \"\": proposals,\r\n \"\": \"\".join([str(pk) for pk in proposal_pks]),\r\n }\r\n return render(request_result_notification_prepare, \"\", ctx)\r\n\r\ndef accept_staff_suggestion(staffId):\r\n return \r\n\r\n@login_required\r\ndef result_notification_send(request_result_notification_send, section_slug, status):\r\n if request_result_notification_send.method != \"\":\r\n return HttpResponseNotAllowed([\"\"])\r\n\r\n if not request_result_notification_send.user.has_perm(\"\" % section_slug):\r\n return render(request_result_notification_send, \"\", \"\")\r\n\r\n if not all([k in request_result_notification_send.POST for k in [\"\", \"\", \"\", \"\"]]):\r\n return HttpResponseBadRequest()\r\n\r\n try:\r\n proposal_pks = [int(pk) for pk in request_result_notification_send.POST[\"\"].split(\"\")]\r\n except ValueError:\r\n return HttpResponseBadRequest()\r\n\r\n proposals = ProposalBase.objects.filter(\r\n kind__section__slug=section_slug,\r\n result__status=status,\r\n )\r\n proposals = proposals.filter(pk__in=proposal_pks)\r\n proposals = proposals.select_related(\"\", \"\")\r\n proposals = proposals.select_subclasses()\r\n\r\n notification_template_pk = request_result_notification_send.POST.get(\"\", \"\")\r\n if notification_template_pk:\r\n notification_template = NotificationTemplate.objects.get(pk=notification_template_pk)\r\n else:\r\n notification_template = None\r\n\r\n emails = []\r\n\r\n for proposal in proposals:\r\n rn = ResultNotification()\r\n rn.proposal = proposal\r\n rn.template = notification_template\r\n rn.to_address = proposal.speaker_email\r\n rn.from_address = request_result_notification_send.POST[\"\"]\r\n rn.subject = request_result_notification_send.POST[\"\"]\r\n rn.body = Template(request_result_notification_send.POST[\"\"]).render(\r\n Context({\r\n \"\": proposal.notification_email_context()\r\n })\r\n )\r\n rn.save()\r\n emails.append(rn.email_args)\r\n\r\n send_mass_mail(emails)\r\n\r\n return redirect(\"\", section_slug=section_slug, status=status)\r\n\r\n\r\n\r\n@login_required\r\ndef review_staff_comment(request_review_staff_comment, section_slug):\r\n if not request_review_staff_comment.user.has_perm(\"\" % section_slug):\r\n return render(request_review_staff_comment,\"\", \"\")\r\n if request_review_staff_comment.method == \"\":\r\n form = StaffCommentForm(request_review_staff_comment.POST)\r\n # TODO: complete implementation of staff comment form - split and mark accepted \r\n if form.is_valid():\r\n staff_ids ": [
    
    [
      -0.0017541894892956326,
      [
        "= ",
        "form",        
        ".",
        "cleaned",
        "_",
        "data",
        ".",
        "getlist",
        "(",
        "<STR_LIT>",
        ")",
        ".",
        "split",
        "(",
        "<STR_LIT_COMMA>",
        ")",
        "<endofline>"
      ]
    ]
  ],
  "from django.core.mail import send_mass_mail\r\nfrom django.db.models import Q\r\nfrom django.http import HttpResponseBadRequest, HttpResponseNotAllowed\r\nfrom django.shortcuts import render, redirect, get_object_or_404\r\nfrom django.template import Context, Template\r\nfrom django.views.decorators.http import require_POST\r\n\r\nfrom account.decorators import login_required\r\n\r\n# @@@ switch to pinax-teams\r\nfrom symposion.teams.models import Team\r\n\r\nfrom symposion.conf import settings\r\nfrom symposion.proposals.models import ProposalBase, ProposalSection\r\nfrom symposion.utils.mail import send_email\r\n\r\nfrom symposion.reviews.forms import ReviewForm, SpeakerCommentForm\r\nfrom symposion.reviews.forms import BulkPresentationForm\r\nfrom symposion.reviews.forms import StaffCommentForm\r\nfrom symposion.reviews.models import (\r\n ReviewAssignment, Review, LatestVote, ProposalResult, NotificationTemplate,\r\n ResultNotification\r\n)\r\n\r\n\r\ndef proposals_generator(request, queryset, user_pk=None, check_speaker=True):\r\n\r\n for obj in queryset:\r\n # @@@ this sucks; we can do better\r\n if check_speaker:\r\n if request.user in [s.user for s in obj.speakers()]:\r\n continue\r\n\r\n try:\r\n obj.result\r\n except ProposalResult.DoesNotExist:\r\n ProposalResult.objects.get_or_create(proposal=obj)\r\n\r\n obj.comment_count = obj.result.comment_count\r\n obj.total_votes = obj.result.vote_count\r\n obj.plus_one = obj.result.plus_one\r\n obj.plus_zero = obj.result.plus_zero\r\n obj.minus_zero = obj.result.minus_zero\r\n obj.minus_one = obj.result.minus_one\r\n lookup_params = dict(proposal=obj)\r\n\r\n if user_pk:\r\n lookup_params[\"\"] = user_pk\r\n else:\r\n lookup_params[\"\"] = request.user\r\n\r\n try:\r\n obj.user_vote = LatestVote.objects.get(**lookup_params).vote\r\n obj.user_vote_css = LatestVote.objects.get(**lookup_params).css_class()\r\n except LatestVote.DoesNotExist:\r\n obj.user_vote = None\r\n obj.user_vote_css = \"\"\r\n\r\n yield obj\r\n\r\ndef access_not_permitted(request,error_message):\r\n return render(request, \"\", error_message)\r\n\r\n\r\n# Returns a list of all proposals, proposals reviewed by the user, or the proposals the user has\r\n# yet to review depending on the link user clicks in dashboard\r\n@login_required\r\ndef review_section(request_review, section_slug, assigned=False, reviewed=\"\"):\r\n\r\n if not request_review.user.has_perm(\"\" % section_slug):\r\n return render(request_review, \"\",\"\")\r\n\r\n section = get_object_or_404(ProposalSection, section__slug=section_slug)\r\n queryset = ProposalBase.objects.filter(kind__section=section.section)\r\n\r\n if assigned:\r\n assignments = ReviewAssignment.objects.filter(user=request_review.user)\\\r\n .values_list(\"\")\r\n queryset = queryset.filter(id__in=assignments)\r\n\r\n # passing reviewed in from reviews.urls and out to review_list for\r\n # appropriate template header rendering\r\n if reviewed == \"\":\r\n queryset = queryset.select_related(\"\").select_subclasses()\r\n reviewed = \"\"\r\n elif reviewed == \"\":\r\n queryset = queryset.filter(reviews__user=request_review.user)\r\n reviewed = \"\"\r\n else:\r\n queryset = queryset.exclude(reviews__user=request_review.user).exclude(\r\n speaker__user=request_review.user)\r\n reviewed = \"\"\r\n\r\n proposals = proposals_generator(request_review, queryset)\r\n\r\n ctx = {\r\n \"\": proposals,\r\n \"\": section,\r\n \"\": reviewed,\r\n }\r\n\r\n return render(request_review, \"\", ctx)\r\n\r\n\r\n@login_required\r\ndef review_list(request_review_list, section_slug, user_pk):\r\n\r\n # if they''t the person whose\r\n # review list is being asked for, don't let them in\r\n if not request_review_list.user.has_perm(\"\" % section_slug):\r\n if not request_review_list.user.pk == user_pk:\r\n return render(request_review_list, \"\", \"\")\r\n\r\n queryset = ProposalBase.objects.select_related(\"\", \"\")\r\n reviewed = LatestVote.objects.filter(user__pk=user_pk).values_list(\"\", flat=True)\r\n queryset = queryset.filter(pk__in=reviewed)\r\n proposals = queryset.order_by(\"\")\r\n\r\n admin = request_review_list.user.has_perm(\"\" % section_slug)\r\n\r\n proposals = proposals_generator(request_review_list, proposals, user_pk=user_pk, check_speaker=not admin)\r\n\r\n ctx = {\r\n \"\": proposals,\r\n }\r\n return render(request_review_list, \"\", ctx)\r\n\r\n\r\n@login_required\r\ndef review_admin(request_review_admin, section_slug):\r\n\r\n if not request_review_admin.user.has_perm(\"\" % section_slug):\r\n return render(request_review_admin, \"\", \"\")\r\n\r\n def reviewers():\r\n already_seen = set()\r\n\r\n for team in Team.objects.filter(permissions__codename=\"\" % section_slug):\r\n for membership in team.memberships.filter(Q(state=\"\") | Q(state=\"\")):\r\n user = membership.user\r\n if user.pk in already_seen:\r\n continue\r\n already_seen.add(user.pk)\r\n\r\n user.comment_count = Review.objects.filter(user=user).count()\r\n user.total_votes = LatestVote.objects.filter(user=user).count()\r\n user.plus_one = LatestVote.objects.filter(\r\n user=user,\r\n vote=LatestVote.VOTES.PLUS_ONE\r\n ).count()\r\n user.plus_zero = LatestVote.objects.filter(\r\n user=user,\r\n vote=LatestVote.VOTES.PLUS_ZERO\r\n ).count()\r\n user.minus_zero = LatestVote.objects.filter(\r\n user=user,\r\n vote=LatestVote.VOTES.MINUS_ZERO\r\n ).count()\r\n user.minus_one = LatestVote.objects.filter(\r\n user=user,\r\n vote=LatestVote.VOTES.MINUS_ONE\r\n ).count()\r\n\r\n yield user\r\n\r\n ctx = {\r\n \"\": section_slug,\r\n \"\": reviewers(),\r\n }\r\n return render(request_review_admin, \"\", ctx)\r\n\r\n@login_required\r\ndef review_detail(request_review_detail, pk):\r\n\r\n proposals = ProposalBase.objects.select_related(\"\").select_subclasses()\r\n proposal = get_object_or_404(proposals, pk=pk)\r\n\r\n if not request_review_detail.user.has_perm(\"\" % proposal.kind.section.slug):\r\n return render(request_review_detail, \"\", \"\")\r\n\r\n speakers = [s.user for s in proposal.speakers()]\r\n\r\n if not request_review_detail.user.is_superuser and request_review_detail.user in speakers:\r\n return render(request_review_detail, \"\", \"\")\r\n\r\n admin = request_review_detail.user.is_staff\r\n\r\n try:\r\n latest_vote = LatestVote.objects.get(proposal=proposal, user=request_review_detail.user)\r\n except LatestVote.DoesNotExist:\r\n latest_vote = None\r\n\r\n if request_review_detail.method == \"\":\r\n if request_review_detail.user in speakers:\r\n return render(request_review_detail, \"\", \"\")\r\n\r\n if \"\" in request_review_detail.POST:\r\n review_form = ReviewForm(request_review_detail.POST)\r\n if review_form.is_valid():\r\n\r\n review = review_form.save(commit=False)\r\n review.user = request_review_detail.user\r\n review.proposal = proposal\r\n review.save()\r\n\r\n return redirect(request_review_detail.path)\r\n else:\r\n message_form = SpeakerCommentForm()\r\n elif \"\" in request_review_detail.POST:\r\n message_form = SpeakerCommentForm(request_review_detail.POST)\r\n if message_form.is_valid():\r\n\r\n message = message_form.save(commit=False)\r\n message.user = request_review_detail.user\r\n message.proposal = proposal\r\n message.save()\r\n\r\n for speaker in speakers:\r\n if speaker and speaker.email:\r\n ctx = {\r\n \"\": proposal,\r\n \"\": message,\r\n \"\": False,\r\n }\r\n send_email(\r\n [speaker.email], \"\",\r\n context=ctx\r\n )\r\n\r\n return redirect(request_review_detail.path)\r\n else:\r\n initial = {}\r\n if latest_vote:\r\n initial[\"\"] = latest_vote.vote\r\n if request_review_detail.user in speakers:\r\n review_form = None\r\n else:\r\n review_form = ReviewForm(initial=initial)\r\n elif \"\" in request_review_detail.POST:\r\n if admin:\r\n result = request_review_detail.POST[\"\"]\r\n\r\n if result == \"\":\r\n proposal.result.status = \"\"\r\n proposal.result.save()\r\n elif result == \"\":\r\n proposal.result.status = \"\"\r\n proposal.result.save()\r\n elif result == \"\":\r\n proposal.result.status = \"\"\r\n proposal.result.save()\r\n elif result == \"\":\r\n proposal.result.status = \"\"\r\n proposal.result.save()\r\n\r\n return redirect(request_review_detail.path)\r\n else:\r\n initial = {}\r\n if latest_vote:\r\n initial[\"\"] = latest_vote.vote\r\n if request_review_detail.user in speakers:\r\n review_form = None\r\n else:\r\n review_form = ReviewForm(initial=initial)\r\n message_form = SpeakerCommentForm()\r\n\r\n proposal.comment_count = proposal.result.comment_count\r\n proposal.total_votes = proposal.result.vote_count\r\n proposal.plus_one = proposal.result.plus_one\r\n proposal.plus_zero = proposal.result.plus_zero\r\n proposal.minus_zero = proposal.result.minus_zero\r\n proposal.minus_one = proposal.result.minus_one\r\n\r\n reviews = Review.objects.filter(proposal=proposal).order_by(\"\")\r\n messages = proposal.messages.order_by(\"\")\r\n\r\n return render(request_review_detail, \"\", {\r\n \"\": proposal,\r\n \"\": latest_vote,\r\n \"\": reviews,\r\n \"\": messages,\r\n \"\": review_form,\r\n \"\": message_form\r\n })\r\n\r\n\r\n@login_required\r\n@require_POST\r\ndef review_delete(request_delete, pk):\r\n review = get_object_or_404(Review, pk=pk)\r\n section_slug = review.section.slug\r\n\r\n if not request_delete.user.has_perm(\"\" % section_slug):\r\n return render(request_delete, \"\", \"\")\r\n\r\n review = get_object_or_404(Review, pk=pk)\r\n review.delete()\r\n\r\n return redirect(\"\", pk=review.proposal.pk)\r\n\r\n\r\n@login_required\r\ndef review_status(request_review_status, section_slug=None, key=None):\r\n\r\n if not request_review_status.user.has_perm(\"\" % section_slug):\r\n return render(request_review_status, \"\", \"\")\r\n\r\n VOTE_THRESHOLD = settings.SYMPOSION_VOTE_THRESHOLD\r\n\r\n ctx = {\r\n \"\": section_slug,\r\n \"\": VOTE_THRESHOLD,\r\n }\r\n\r\n queryset = ProposalBase.objects.select_related(\"\", \"\").select_subclasses()\r\n if section_slug:\r\n queryset = queryset.filter(kind__section__slug=section_slug)\r\n\r\n proposals = {\r\n # proposals with at least VOTE_THRESHOLD reviews and at least one +1 and no -1s, sorted by\r\n # the ''\r\n \"\": queryset.filter(result__vote_count__gte=VOTE_THRESHOLD, result__plus_one__gt=0,\r\n result__minus_one=0).order_by(\"\"),\r\n # proposals with at least VOTE_THRESHOLD reviews and at least one -1 and no +1s, reverse\r\n # sorted by the ''\r\n \"\": queryset.filter(result__vote_count__gte=VOTE_THRESHOLD, result__minus_one__gt=0,\r\n result__plus_one=0).order_by(\"\"),\r\n # proposals with at least VOTE_THRESHOLD reviews and neither a +1 or a -1, sorted by total\r\n # votes (lowest first)\r\n \"\": queryset.filter(result__vote_count__gte=VOTE_THRESHOLD, result__minus_one=0,\r\n result__plus_one=0).order_by(\"\"),\r\n # proposals with at least VOTE_THRESHOLD reviews and both a +1 and -1, sorted by total\r\n # votes (highest first)\r\n \"\": queryset.filter(result__vote_count__gte=VOTE_THRESHOLD,\r\n result__plus_one__gt=0, result__minus_one__gt=0)\r\n .order_by(\"\"),\r\n # proposals with fewer than VOTE_THRESHOLD reviews\r\n \"\": queryset.filter(result__vote_count__lt=VOTE_THRESHOLD)\r\n .order_by(\"\"),\r\n }\r\n\r\n admin = request_review_status.user.has_perm(\"\" % section_slug)\r\n\r\n for status in proposals:\r\n if key and key != status:\r\n continue\r\n proposals[status] = list(proposals_generator(request_review_status, proposals[status], check_speaker=not admin))\r\n\r\n if key:\r\n ctx.update({\r\n \"\": key,\r\n \"\": proposals[key],\r\n })\r\n else:\r\n ctx[\"\"] = proposals\r\n\r\n return render(request_review_status, \"\", ctx)\r\n\r\n\r\n@login_required\r\ndef review_assignments(request_review_assignments):\r\n if not request_review_assignments.user.groups.filter(name=\"\").exists():\r\n return render(request_review_assignments, \"\", \"\")\r\n assignments = ReviewAssignment.objects.filter(\r\n user=request_review_assignments.user,\r\n opted_out=False\r\n )\r\n return render(request_review_assignments, \"\", {\r\n \"\": assignments,\r\n })\r\n\r\n\r\n@login_required\r\n@require_POST\r\ndef review_assignment_opt_out(request_review_assignment_opt_out, pk):\r\n review_assignment = get_object_or_404(\r\n ReviewAssignment, pk=pk, user=request_review_assignment_opt_out.user)\r\n if not review_assignment.opted_out:\r\n review_assignment.opted_out = True\r\n review_assignment.save()\r\n ReviewAssignment.create_assignments(\r\n review_assignment.proposal, origin=ReviewAssignment.AUTO_ASSIGNED_LATER)\r\n return redirect(\"\")\r\n\r\n\r\n@login_required\r\ndef review_bulk_accept(request_review_bulk_accept, section_slug):\r\n if not request_review_bulk_accept.user.has_perm(\"\" % section_slug):\r\n return render(request_review_bulk_accept, \"\", \"\")\r\n if request_review_bulk_accept.method == \"\":\r\n form = BulkPresentationForm(request_review_bulk_accept.POST)\r\n if form.is_valid():\r\n talk_ids = form.cleaned_data[\"\"].split(\"\")\r\n talks = ProposalBase.objects.filter(id__in=talk_ids).select_related(\"\")\r\n for talk in talks:\r\n talk.result.status = \"\"\r\n talk.result.save()\r\n return redirect(\"\", section_slug=section_slug)\r\n else:\r\n form = BulkPresentationForm()\r\n\r\n return render(request_review_bulk_accept, \"\", {\r\n \"\": form,\r\n })\r\n\r\n\r\n@login_required\r\ndef result_notification(request_result_notification, section_slug, status):\r\n if not request_result_notification.user.has_perm(\"\" % section_slug):\r\n return render(request_result_notification, \"\", \"\")\r\n\r\n proposals = ProposalBase.objects.filter(kind__section__slug=section_slug, result__status=status).select_related(\"\", \"\").select_subclasses()\r\n notification_templates = NotificationTemplate.objects.all()\r\n\r\n ctx = {\r\n \"\": section_slug,\r\n \"\": status,\r\n \"\": proposals,\r\n \"\": notification_templates,\r\n }\r\n return render(request_result_notification, \"\", ctx)\r\n\r\n\r\n@login_required\r\ndef result_notification_prepare(request_result_notification_prepare, section_slug, status):\r\n if request_result_notification_prepare.method != \"\":\r\n return HttpResponseNotAllowed([\"\"])\r\n\r\n if not request_result_notification_prepare.user.has_perm(\"\" % section_slug):\r\n return render(request_result_notification_prepare, \"\", \"\")\r\n\r\n proposal_pks = []\r\n try:\r\n for pk in request_result_notification_prepare.POST.getlist(\"\"):\r\n proposal_pks.append(int(pk))\r\n except ValueError:\r\n return HttpResponseBadRequest()\r\n proposals = ProposalBase.objects.filter(\r\n kind__section__slug=section_slug,\r\n result__status=status,\r\n )\r\n proposals = proposals.filter(pk__in=proposal_pks)\r\n proposals = proposals.select_related(\"\", \"\")\r\n proposals = proposals.select_subclasses()\r\n\r\n notification_template_pk = request_result_notification_prepare.POST.get(\"\", \"\")\r\n if notification_template_pk:\r\n notification_template = NotificationTemplate.objects.get(pk=notification_template_pk)\r\n else:\r\n notification_template = None\r\n\r\n ctx = {\r\n \"\": section_slug,\r\n \"\": status,\r\n \"\": notification_template,\r\n \"\": proposals,\r\n \"\": \"\".join([str(pk) for pk in proposal_pks]),\r\n }\r\n return render(request_result_notification_prepare, \"\", ctx)\r\n\r\ndef accept_staff_suggestion(staffId):\r\n return \r\n\r\n@login_required\r\ndef result_notification_send(request_result_notification_send, section_slug, status):\r\n if request_result_notification_send.method != \"\":\r\n return HttpResponseNotAllowed([\"\"])\r\n\r\n if not request_result_notification_send.user.has_perm(\"\" % section_slug):\r\n return render(request_result_notification_send, \"\", \"\")\r\n\r\n if not all([k in request_result_notification_send.POST for k in [\"\", \"\", \"\", \"\"]]):\r\n return HttpResponseBadRequest()\r\n\r\n try:\r\n proposal_pks = [int(pk) for pk in request_result_notification_send.POST[\"\"].split(\"\")]\r\n except ValueError:\r\n return HttpResponseBadRequest()\r\n\r\n proposals = ProposalBase.objects.filter(\r\n kind__section__slug=section_slug,\r\n result__status=status,\r\n )\r\n proposals = proposals.filter(pk__in=proposal_pks)\r\n proposals = proposals.select_related(\"\", \"\")\r\n proposals = proposals.select_subclasses()\r\n\r\n notification_template_pk = request_result_notification_send.POST.get(\"\", \"\")\r\n if notification_template_pk:\r\n notification_template = NotificationTemplate.objects.get(pk=notification_template_pk)\r\n else:\r\n notification_template = None\r\n\r\n emails = []\r\n\r\n for proposal in proposals:\r\n rn = ResultNotification()\r\n rn.proposal = proposal\r\n rn.template = notification_template\r\n rn.to_address = proposal.speaker_email\r\n rn.from_address = request_result_notification_send.POST[\"\"]\r\n rn.subject = request_result_notification_send.POST[\"\"]\r\n rn.body = Template(request_result_notification_send.POST[\"\"]).render(\r\n Context({\r\n \"\": proposal.notification_email_context()\r\n })\r\n )\r\n rn.save()\r\n emails.append(rn.email_args)\r\n\r\n send_mass_mail(emails)\r\n\r\n return redirect(\"\", section_slug=section_slug, status=status)\r\n\r\n\r\n\r\n@login_required\r\ndef review_staff_comment(request_review_staff_comment, section_slug):\r\n if not request_review_staff_comment.user.has_perm(\"\" % section_slug):\r\n return render(request_review_staff_comment,\"\", \"\")\r\n if request_review_staff_comment.method == \"\":\r\n form = StaffCommentForm(request_review_staff_comment.POST)\r\n # TODO: complete implementation of staff comment form - split and mark accepted \r\n if form.is_valid():\r\n staff_ids =": [
    
    [
      -0.0018851014550118298,
      [
        "form",
        ".",
        "cleaned",
        "_",
        "data",
        ".",
        "getlist",
        "(",
        "<STR_LIT>",
        ")",
        ".",
        "split",
        "(",
        "<STR_LIT_COMMA>",
        ")",
        "<endofline>"
      ]
    ]
  ],
  "from django.core.mail import send_mass_mail\r\nfrom django.db.models import Q\r\nfrom django.http import HttpResponseBadRequest, HttpResponseNotAllowed\r\nfrom django.shortcuts import render, redirect, get_object_or_404\r\nfrom django.template import Context, Template\r\nfrom django.views.decorators.http import require_POST\r\n\r\nfrom account.decorators import login_required\r\n\r\n# @@@ switch to pinax-teams\r\nfrom symposion.teams.models import Team\r\n\r\nfrom symposion.conf import settings\r\nfrom symposion.proposals.models import ProposalBase, ProposalSection\r\nfrom symposion.utils.mail import send_email\r\n\r\nfrom symposion.reviews.forms import ReviewForm, SpeakerCommentForm\r\nfrom symposion.reviews.forms import BulkPresentationForm\r\nfrom symposion.reviews.forms import StaffCommentForm\r\nfrom symposion.reviews.models import (\r\n ReviewAssignment, Review, LatestVote, ProposalResult, NotificationTemplate,\r\n ResultNotification\r\n)\r\n\r\n\r\ndef proposals_generator(request, queryset, user_pk=None, check_speaker=True):\r\n\r\n for obj in queryset:\r\n # @@@ this sucks; we can do better\r\n if check_speaker:\r\n if request.user in [s.user for s in obj.speakers()]:\r\n continue\r\n\r\n try:\r\n obj.result\r\n except ProposalResult.DoesNotExist:\r\n ProposalResult.objects.get_or_create(proposal=obj)\r\n\r\n obj.comment_count = obj.result.comment_count\r\n obj.total_votes = obj.result.vote_count\r\n obj.plus_one = obj.result.plus_one\r\n obj.plus_zero = obj.result.plus_zero\r\n obj.minus_zero = obj.result.minus_zero\r\n obj.minus_one = obj.result.minus_one\r\n lookup_params = dict(proposal=obj)\r\n\r\n if user_pk:\r\n lookup_params[\"\"] = user_pk\r\n else:\r\n lookup_params[\"\"] = request.user\r\n\r\n try:\r\n obj.user_vote = LatestVote.objects.get(**lookup_params).vote\r\n obj.user_vote_css = LatestVote.objects.get(**lookup_params).css_class()\r\n except LatestVote.DoesNotExist:\r\n obj.user_vote = None\r\n obj.user_vote_css = \"\"\r\n\r\n yield obj\r\n\r\ndef access_not_permitted(request,error_message):\r\n return render(request, \"\", error_message)\r\n\r\n\r\n# Returns a list of all proposals, proposals reviewed by the user, or the proposals the user has\r\n# yet to review depending on the link user clicks in dashboard\r\n@login_required\r\ndef review_section(request_review, section_slug, assigned=False, reviewed=\"\"):\r\n\r\n if not request_review.user.has_perm(\"\" % section_slug):\r\n return render(request_review, \"\",\"\")\r\n\r\n section = get_object_or_404(ProposalSection, section__slug=section_slug)\r\n queryset = ProposalBase.objects.filter(kind__section=section.section)\r\n\r\n if assigned:\r\n assignments = ReviewAssignment.objects.filter(user=request_review.user)\\\r\n .values_list(\"\")\r\n queryset = queryset.filter(id__in=assignments)\r\n\r\n # passing reviewed in from reviews.urls and out to review_list for\r\n # appropriate template header rendering\r\n if reviewed == \"\":\r\n queryset = queryset.select_related(\"\").select_subclasses()\r\n reviewed = \"\"\r\n elif reviewed == \"\":\r\n queryset = queryset.filter(reviews__user=request_review.user)\r\n reviewed = \"\"\r\n else:\r\n queryset = queryset.exclude(reviews__user=request_review.user).exclude(\r\n speaker__user=request_review.user)\r\n reviewed = \"\"\r\n\r\n proposals = proposals_generator(request_review, queryset)\r\n\r\n ctx = {\r\n \"\": proposals,\r\n \"\": section,\r\n \"\": reviewed,\r\n }\r\n\r\n return render(request_review, \"\", ctx)\r\n\r\n\r\n@login_required\r\ndef review_list(request_review_list, section_slug, user_pk):\r\n\r\n # if they''t the person whose\r\n # review list is being asked for, don't let them in\r\n if not request_review_list.user.has_perm(\"\" % section_slug):\r\n if not request_review_list.user.pk == user_pk:\r\n return render(request_review_list, \"\", \"\")\r\n\r\n queryset = ProposalBase.objects.select_related(\"\", \"\")\r\n reviewed = LatestVote.objects.filter(user__pk=user_pk).values_list(\"\", flat=True)\r\n queryset = queryset.filter(pk__in=reviewed)\r\n proposals = queryset.order_by(\"\")\r\n\r\n admin = request_review_list.user.has_perm(\"\" % section_slug)\r\n\r\n proposals = proposals_generator(request_review_list, proposals, user_pk=user_pk, check_speaker=not admin)\r\n\r\n ctx = {\r\n \"\": proposals,\r\n }\r\n return render(request_review_list, \"\", ctx)\r\n\r\n\r\n@login_required\r\ndef review_admin(request_review_admin, section_slug):\r\n\r\n if not request_review_admin.user.has_perm(\"\" % section_slug):\r\n return render(request_review_admin, \"\", \"\")\r\n\r\n def reviewers():\r\n already_seen = set()\r\n\r\n for team in Team.objects.filter(permissions__codename=\"\" % section_slug):\r\n for membership in team.memberships.filter(Q(state=\"\") | Q(state=\"\")):\r\n user = membership.user\r\n if user.pk in already_seen:\r\n continue\r\n already_seen.add(user.pk)\r\n\r\n user.comment_count = Review.objects.filter(user=user).count()\r\n user.total_votes = LatestVote.objects.filter(user=user).count()\r\n user.plus_one = LatestVote.objects.filter(\r\n user=user,\r\n vote=LatestVote.VOTES.PLUS_ONE\r\n ).count()\r\n user.plus_zero = LatestVote.objects.filter(\r\n user=user,\r\n vote=LatestVote.VOTES.PLUS_ZERO\r\n ).count()\r\n user.minus_zero = LatestVote.objects.filter(\r\n user=user,\r\n vote=LatestVote.VOTES.MINUS_ZERO\r\n ).count()\r\n user.minus_one = LatestVote.objects.filter(\r\n user=user,\r\n vote=LatestVote.VOTES.MINUS_ONE\r\n ).count()\r\n\r\n yield user\r\n\r\n ctx = {\r\n \"\": section_slug,\r\n \"\": reviewers(),\r\n }\r\n return render(request_review_admin, \"\", ctx)\r\n\r\n@login_required\r\ndef review_detail(request_review_detail, pk):\r\n\r\n proposals = ProposalBase.objects.select_related(\"\").select_subclasses()\r\n proposal = get_object_or_404(proposals, pk=pk)\r\n\r\n if not request_review_detail.user.has_perm(\"\" % proposal.kind.section.slug):\r\n return render(request_review_detail, \"\", \"\")\r\n\r\n speakers = [s.user for s in proposal.speakers()]\r\n\r\n if not request_review_detail.user.is_superuser and request_review_detail.user in speakers:\r\n return render(request_review_detail, \"\", \"\")\r\n\r\n admin = request_review_detail.user.is_staff\r\n\r\n try:\r\n latest_vote = LatestVote.objects.get(proposal=proposal, user=request_review_detail.user)\r\n except LatestVote.DoesNotExist:\r\n latest_vote = None\r\n\r\n if request_review_detail.method == \"\":\r\n if request_review_detail.user in speakers:\r\n return render(request_review_detail, \"\", \"\")\r\n\r\n if \"\" in request_review_detail.POST:\r\n review_form = ReviewForm(request_review_detail.POST)\r\n if review_form.is_valid():\r\n\r\n review = review_form.save(commit=False)\r\n review.user = request_review_detail.user\r\n review.proposal = proposal\r\n review.save()\r\n\r\n return redirect(request_review_detail.path)\r\n else:\r\n message_form = SpeakerCommentForm()\r\n elif \"\" in request_review_detail.POST:\r\n message_form = SpeakerCommentForm(request_review_detail.POST)\r\n if message_form.is_valid():\r\n\r\n message = message_form.save(commit=False)\r\n message.user = request_review_detail.user\r\n message.proposal = proposal\r\n message.save()\r\n\r\n for speaker in speakers:\r\n if speaker and speaker.email:\r\n ctx = {\r\n \"\": proposal,\r\n \"\": message,\r\n \"\": False,\r\n }\r\n send_email(\r\n [speaker.email], \"\",\r\n context=ctx\r\n )\r\n\r\n return redirect(request_review_detail.path)\r\n else:\r\n initial = {}\r\n if latest_vote:\r\n initial[\"\"] = latest_vote.vote\r\n if request_review_detail.user in speakers:\r\n review_form = None\r\n else:\r\n review_form = ReviewForm(initial=initial)\r\n elif \"\" in request_review_detail.POST:\r\n if admin:\r\n result = request_review_detail.POST[\"\"]\r\n\r\n if result == \"\":\r\n proposal.result.status = \"\"\r\n proposal.result.save()\r\n elif result == \"\":\r\n proposal.result.status = \"\"\r\n proposal.result.save()\r\n elif result == \"\":\r\n proposal.result.status = \"\"\r\n proposal.result.save()\r\n elif result == \"\":\r\n proposal.result.status = \"\"\r\n proposal.result.save()\r\n\r\n return redirect(request_review_detail.path)\r\n else:\r\n initial = {}\r\n if latest_vote:\r\n initial[\"\"] = latest_vote.vote\r\n if request_review_detail.user in speakers:\r\n review_form = None\r\n else:\r\n review_form = ReviewForm(initial=initial)\r\n message_form = SpeakerCommentForm()\r\n\r\n proposal.comment_count = proposal.result.comment_count\r\n proposal.total_votes = proposal.result.vote_count\r\n proposal.plus_one = proposal.result.plus_one\r\n proposal.plus_zero = proposal.result.plus_zero\r\n proposal.minus_zero = proposal.result.minus_zero\r\n proposal.minus_one = proposal.result.minus_one\r\n\r\n reviews = Review.objects.filter(proposal=proposal).order_by(\"\")\r\n messages = proposal.messages.order_by(\"\")\r\n\r\n return render(request_review_detail, \"\", {\r\n \"\": proposal,\r\n \"\": latest_vote,\r\n \"\": reviews,\r\n \"\": messages,\r\n \"\": review_form,\r\n \"\": message_form\r\n })\r\n\r\n\r\n@login_required\r\n@require_POST\r\ndef review_delete(request_delete, pk):\r\n review = get_object_or_404(Review, pk=pk)\r\n section_slug = review.section.slug\r\n\r\n if not request_delete.user.has_perm(\"\" % section_slug):\r\n return render(request_delete, \"\", \"\")\r\n\r\n review = get_object_or_404(Review, pk=pk)\r\n review.delete()\r\n\r\n return redirect(\"\", pk=review.proposal.pk)\r\n\r\n\r\n@login_required\r\ndef review_status(request_review_status, section_slug=None, key=None):\r\n\r\n if not request_review_status.user.has_perm(\"\" % section_slug):\r\n return render(request_review_status, \"\", \"\")\r\n\r\n VOTE_THRESHOLD = settings.SYMPOSION_VOTE_THRESHOLD\r\n\r\n ctx = {\r\n \"\": section_slug,\r\n \"\": VOTE_THRESHOLD,\r\n }\r\n\r\n queryset = ProposalBase.objects.select_related(\"\", \"\").select_subclasses()\r\n if section_slug:\r\n queryset = queryset.filter(kind__section__slug=section_slug)\r\n\r\n proposals = {\r\n # proposals with at least VOTE_THRESHOLD reviews and at least one +1 and no -1s, sorted by\r\n # the ''\r\n \"\": queryset.filter(result__vote_count__gte=VOTE_THRESHOLD, result__plus_one__gt=0,\r\n result__minus_one=0).order_by(\"\"),\r\n # proposals with at least VOTE_THRESHOLD reviews and at least one -1 and no +1s, reverse\r\n # sorted by the ''\r\n \"\": queryset.filter(result__vote_count__gte=VOTE_THRESHOLD, result__minus_one__gt=0,\r\n result__plus_one=0).order_by(\"\"),\r\n # proposals with at least VOTE_THRESHOLD reviews and neither a +1 or a -1, sorted by total\r\n # votes (lowest first)\r\n \"\": queryset.filter(result__vote_count__gte=VOTE_THRESHOLD, result__minus_one=0,\r\n result__plus_one=0).order_by(\"\"),\r\n # proposals with at least VOTE_THRESHOLD reviews and both a +1 and -1, sorted by total\r\n # votes (highest first)\r\n \"\": queryset.filter(result__vote_count__gte=VOTE_THRESHOLD,\r\n result__plus_one__gt=0, result__minus_one__gt=0)\r\n .order_by(\"\"),\r\n # proposals with fewer than VOTE_THRESHOLD reviews\r\n \"\": queryset.filter(result__vote_count__lt=VOTE_THRESHOLD)\r\n .order_by(\"\"),\r\n }\r\n\r\n admin = request_review_status.user.has_perm(\"\" % section_slug)\r\n\r\n for status in proposals:\r\n if key and key != status:\r\n continue\r\n proposals[status] = list(proposals_generator(request_review_status, proposals[status], check_speaker=not admin))\r\n\r\n if key:\r\n ctx.update({\r\n \"\": key,\r\n \"\": proposals[key],\r\n })\r\n else:\r\n ctx[\"\"] = proposals\r\n\r\n return render(request_review_status, \"\", ctx)\r\n\r\n\r\n@login_required\r\ndef review_assignments(request_review_assignments):\r\n if not request_review_assignments.user.groups.filter(name=\"\").exists():\r\n return render(request_review_assignments, \"\", \"\")\r\n assignments = ReviewAssignment.objects.filter(\r\n user=request_review_assignments.user,\r\n opted_out=False\r\n )\r\n return render(request_review_assignments, \"\", {\r\n \"\": assignments,\r\n })\r\n\r\n\r\n@login_required\r\n@require_POST\r\ndef review_assignment_opt_out(request_review_assignment_opt_out, pk):\r\n review_assignment = get_object_or_404(\r\n ReviewAssignment, pk=pk, user=request_review_assignment_opt_out.user)\r\n if not review_assignment.opted_out:\r\n review_assignment.opted_out = True\r\n review_assignment.save()\r\n ReviewAssignment.create_assignments(\r\n review_assignment.proposal, origin=ReviewAssignment.AUTO_ASSIGNED_LATER)\r\n return redirect(\"\")\r\n\r\n\r\n@login_required\r\ndef review_bulk_accept(request_review_bulk_accept, section_slug):\r\n if not request_review_bulk_accept.user.has_perm(\"\" % section_slug):\r\n return render(request_review_bulk_accept, \"\", \"\")\r\n if request_review_bulk_accept.method == \"\":\r\n form = BulkPresentationForm(request_review_bulk_accept.POST)\r\n if form.is_valid():\r\n talk_ids = form.cleaned_data[\"\"].split(\"\")\r\n talks = ProposalBase.objects.filter(id__in=talk_ids).select_related(\"\")\r\n for talk in talks:\r\n talk.result.status = \"\"\r\n talk.result.save()\r\n return redirect(\"\", section_slug=section_slug)\r\n else:\r\n form = BulkPresentationForm()\r\n\r\n return render(request_review_bulk_accept, \"\", {\r\n \"\": form,\r\n })\r\n\r\n\r\n@login_required\r\ndef result_notification(request_result_notification, section_slug, status):\r\n if not request_result_notification.user.has_perm(\"\" % section_slug):\r\n return render(request_result_notification, \"\", \"\")\r\n\r\n proposals = ProposalBase.objects.filter(kind__section__slug=section_slug, result__status=status).select_related(\"\", \"\").select_subclasses()\r\n notification_templates = NotificationTemplate.objects.all()\r\n\r\n ctx = {\r\n \"\": section_slug,\r\n \"\": status,\r\n \"\": proposals,\r\n \"\": notification_templates,\r\n }\r\n return render(request_result_notification, \"\", ctx)\r\n\r\n\r\n@login_required\r\ndef result_notification_prepare(request_result_notification_prepare, section_slug, status):\r\n if request_result_notification_prepare.method != \"\":\r\n return HttpResponseNotAllowed([\"\"])\r\n\r\n if not request_result_notification_prepare.user.has_perm(\"\" % section_slug):\r\n return render(request_result_notification_prepare, \"\", \"\")\r\n\r\n proposal_pks = []\r\n try:\r\n for pk in request_result_notification_prepare.POST.getlist(\"\"):\r\n proposal_pks.append(int(pk))\r\n except ValueError:\r\n return HttpResponseBadRequest()\r\n proposals = ProposalBase.objects.filter(\r\n kind__section__slug=section_slug,\r\n result__status=status,\r\n )\r\n proposals = proposals.filter(pk__in=proposal_pks)\r\n proposals = proposals.select_related(\"\", \"\")\r\n proposals = proposals.select_subclasses()\r\n\r\n notification_template_pk = request_result_notification_prepare.POST.get(\"\", \"\")\r\n if notification_template_pk:\r\n notification_template = NotificationTemplate.objects.get(pk=notification_template_pk)\r\n else:\r\n notification_template = None\r\n\r\n ctx = {\r\n \"\": section_slug,\r\n \"\": status,\r\n \"\": notification_template,\r\n \"\": proposals,\r\n \"\": \"\".join([str(pk) for pk in proposal_pks]),\r\n }\r\n return render(request_result_notification_prepare, \"\", ctx)\r\n\r\ndef accept_staff_suggestion(staffId):\r\n return \r\n\r\n@login_required\r\ndef result_notification_send(request_result_notification_send, section_slug, status):\r\n if request_result_notification_send.method != \"\":\r\n return HttpResponseNotAllowed([\"\"])\r\n\r\n if not request_result_notification_send.user.has_perm(\"\" % section_slug):\r\n return render(request_result_notification_send, \"\", \"\")\r\n\r\n if not all([k in request_result_notification_send.POST for k in [\"\", \"\", \"\", \"\"]]):\r\n return HttpResponseBadRequest()\r\n\r\n try:\r\n proposal_pks = [int(pk) for pk in request_result_notification_send.POST[\"\"].split(\"\")]\r\n except ValueError:\r\n return HttpResponseBadRequest()\r\n\r\n proposals = ProposalBase.objects.filter(\r\n kind__section__slug=section_slug,\r\n result__status=status,\r\n )\r\n proposals = proposals.filter(pk__in=proposal_pks)\r\n proposals = proposals.select_related(\"\", \"\")\r\n proposals = proposals.select_subclasses()\r\n\r\n notification_template_pk = request_result_notification_send.POST.get(\"\", \"\")\r\n if notification_template_pk:\r\n notification_template = NotificationTemplate.objects.get(pk=notification_template_pk)\r\n else:\r\n notification_template = None\r\n\r\n emails = []\r\n\r\n for proposal in proposals:\r\n rn = ResultNotification()\r\n rn.proposal = proposal\r\n rn.template = notification_template\r\n rn.to_address = proposal.speaker_email\r\n rn.from_address = request_result_notification_send.POST[\"\"]\r\n rn.subject = request_result_notification_send.POST[\"\"]\r\n rn.body = Template(request_result_notification_send.POST[\"\"]).render(\r\n Context({\r\n \"\": proposal.notification_email_context()\r\n })\r\n )\r\n rn.save()\r\n emails.append(rn.email_args)\r\n\r\n send_mass_mail(emails)\r\n\r\n return redirect(\"\", section_slug=section_slug, status=status)\r\n\r\n\r\n\r\n@login_required\r\ndef review_staff_comment(request_review_staff_comment, section_slug):\r\n if not request_review_staff_comment.user.has_perm(\"\" % section_slug):\r\n return render(request_review_staff_comment,\"\", \"\")\r\n if request_review_staff_comment.method == \"\":\r\n form = StaffCommentForm(request_review_staff_comment.POST)\r\n # TODO: complete implementation of staff comment form - split and mark accepted \r\n if form.is_valid():\r\n staff_ids = ": [
    
    [
      -0.0018851014550118298,
      [
        "form",
        ".",
        "cleaned",
        "_",
        "data",
        ".",
        "getlist",
        "(",
        "<STR_LIT>",
        ")",
        ".",
        "split",
        "(",
        "<STR_LIT_COMMA>",
        ")",
        "<endofline>"
      ]
    ]
  ]
}